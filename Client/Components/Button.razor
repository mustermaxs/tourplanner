@using System.Resources
@using Client.Utils


<button @onclick="OnClickCallback" class="@_btnClass @GetMarginStyles()" disabled="@IsDisabled">

    @if (HasIcon())
    {
        <div class="tp-button-icon-wrapper">
            <div class="icon-wrapper">
                <img src="@IconPath" alt="@AltText"/>
            </div>
        </div>
    }

    <div class="tp-button-label">@Label</div>
</button>


@code {
    private string _btnClass;
    private String? _IconPath = String.Empty;
    private string _backgroundColor = "";

    [Parameter] public bool IsDisabled { get; set; } = false;

    [Parameter] public String ButtonType { get; set; } = "secondary";

    [Parameter] public EventCallback OnClickCallback { get; set; }

    [Parameter] public String mt { get; set; } = "0px";

    [Parameter] public String mb { get; set; } = "0px";

    [Parameter] public String ml { get; set; } = "0px";

    [Parameter] public String mr { get; set; } = "0px";

    private string GetMarginStyles()
    {
        return $"{(mt != null ? "mt-" + mt : "")} {(mb != null ? "mb-" + mb : "")} {(ml != null ? "ml-" + ml : "")} {(mr != null ? "mr-" + mr : "")}";
        
    }

    protected override void OnParametersSet()
    {
        SetCssClass();
    }
    
    private bool HasIcon() => !String.IsNullOrEmpty(Img);

    private void SetCssClass()
    {
        _btnClass = HasIcon() ? "tp-button icon" : "tp-button";
        _btnClass += $" {ButtonType}";
    }

    [Parameter] public String? AltText { get; set; } = "undefined";

    [Parameter] public String Label { get; set; } = "Label";

    private String? IconPath
    {
        get
        {
            if (!String.IsNullOrEmpty(Img))
            {
                return StaticResService.GetIconPath(Img);
            }

            return String.Empty;
        }
        set => _IconPath = value;
    }

    [Parameter] public String? Img { private get; set; }
}