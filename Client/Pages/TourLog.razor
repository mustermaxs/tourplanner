@page "/tours/{TourId}/log/{TourLogId}"
@attribute [StreamRendering]
@inject TourLogPageViewModel EditLogVM
@inject NavigationManager NavManager
@using Client.Components
@using Client.Utils.Specifications
@using Client.ViewModels

<PageTitle>Edit Tour Log</PageTitle>


@if (EditLogVM.TourLog == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="d-flex justify-content-between align-items-center">
        <h1>Edit Tour Log</h1>
        <div>
            <button class="btn btn-danger" @onclick="() => EditLogVM.DeleteLog()">
                Delete
            </button>
        </div>
    </div>
    <h5>Tour: @EditLogVM.TourLog.Tour.Name</h5>
            <p>@EditLogVM.TourLog.DateTime</p>
    <div class="row mt-3">
        <div class="col-md-6">
            <label for="rating">Rating</label>
            <input type="number" max="10" class="form-control" id="rating" @bind="EditLogVM.TourLog.Rating">
            <TpInput TypeParam="float" InputType="number"  Max="10" Min="0" Placeholder="0-10" Specification="new ValueInRangeSpecification<float>(0, 10)"></TpInput>
        </div>
         <div class="col-md-6">
            <label for="difficulty">Difficulty</label>
            <input type="number" max="10" class="form-control" id="difficulty" @bind="EditLogVM.TourLog.Difficulty">
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-6">
            <label for="rating">Distance (km)</label>
            <input type="number" min="0" step="0.1" class="form-control" id="rating" @bind="EditLogVM.TourLog.Distance">
        </div>
        <div class="col-md-6">
            <label for="rating">Duration</label>
            <input type="number" min="0" class="form-control" id="duration" @bind="EditLogVM.TourLog.Duration">
        </div>
    </div>

    <div class="form-group mt-3">
        <label for="comment">Comment</label>
        <textarea class="form-control" id="comment" rows="3" @bind="EditLogVM.TourLog.Comment"></textarea>
    </div>
    <ButtonGroup Layout="ButtonGroup.Position.Center">
        <Button ButtonType="Primary" mt="4" Label="Update" Img="map" OnClickCallback="EditLogVM.UpdateLog"/>
    </ButtonGroup>
}

@code {
    [Parameter] public string TourLogId { get; set; }

    [Parameter] public string TourId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await EditLogVM.InitializeAsync(StateHasChanged);
        await EditLogVM.Init(Convert.ToInt32(TourId), Convert.ToInt32(TourLogId));
    }

}