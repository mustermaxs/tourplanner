@page "/tours/{TourId}/log/{TourLogId}"
@attribute [StreamRendering]
@inject TourLogPageViewModel EditLogVM
@inject NavigationManager NavManager

<PageTitle>Edit Tour Log</PageTitle>


@if (EditLogVM.TourLog == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-between align-items-center">
    <h1>Edit Tour Log</h1>
        <div>
            <button class="btn btn-danger" @onclick="() => EditLogVM.DeleteLog()">
                Delete
            </button>
        </div>
    </div>
    <h5>Tour: @EditLogVM.TourLog.Tour.Name</h5>
        <div class="row">
            <div class="col-md-4">
                <label for="date">Date</label>
                <input type="datetime-local" class="form-control" id="date" @bind="EditLogVM.TourLog.DateTime">
            </div>
            <div class="col-md-4">
                <label for="difficulty">Difficulty</label>
                <input type="number" max="10" class="form-control" id="difficulty" @bind="EditLogVM.TourLog.Difficulty">
            </div>
            <div class="col-md-4">
                <label for="rating">Rating</label>
                <input type="number" max="10" class="form-control" id="rating" @bind="EditLogVM.TourLog.Rating">
            </div>
        </div>

        <div class="form-group mt-3">
            <label for="comment">Comment</label>
            <textarea class="form-control" id="comment" rows="3" @bind="EditLogVM.TourLog.Comment"></textarea>
        </div>

        <button class="btn btn-primary mt-3" @onclick="EditLogVM.UpdateLog">Update</button>
}

@code {
    [Parameter]
    public string TourLogId { get; set; }

    [Parameter]
    public string TourId {get; set;}

    protected override async Task OnInitializedAsync()
    {
        await EditLogVM.InitializeAsync(Convert.ToInt32(TourId), Convert.ToInt32(TourLogId));
        Console.WriteLine(EditLogVM.TourLog.Id);
        StateHasChanged();
    }
}
