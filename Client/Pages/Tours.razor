@page "/tours"
@attribute [StreamRendering(true)]
@inject ToursPageViewModel ToursVM
@inject NavigationManager NavManager
@using Client.Components
@using Client.Pages;

<PageTitle>Tours</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <PageHeader Icon="map"><span>Tours</span></PageHeader>

    <Button Label="Add Tour" OnClickCallback="AddTour"></Button>

</div>
@if (ToursVM.Tours == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Transport Type</th>
                    <th>From</th>
                    <th>To</th>
                    <th>Popularity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tour in ToursVM.Tours)
                {
                    <tr>
                        <td>
                            <a class="link" style="cursor:pointer" @onclick='() => TourDetails(tour.Id.ToString())'>@tour.Name</a>
                        </td>
                        <td>@tour.Description</td>
                        <td>@tour.TransportType</td>
                        <td>@tour.From</td>
                        <td>@tour.To</td>
                        <td>@tour.Popularity</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ToursVM.GetToursAsync();
        StateHasChanged();
    }

    private void AddTour()
    {
        NavManager.NavigateTo("/new");
    }

    private void EditTour(int tourId)
    {
        NavManager.NavigateTo($"/tour/{tourId}");
    }

    private void TourDetails(string tourId)
    {
        Console.WriteLine($"TOUR ID: {tourId}");
        NavManager.NavigateTo($"/tours/{tourId}");
    }
}
