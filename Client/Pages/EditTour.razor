@page "/edit/{TourId}"
@attribute [StreamRendering]
@inject TourEditPageViewModel EditTourVM
@using Client.Models

<PageTitle>Edit Tour</PageTitle>

<h1>Edit Tour</h1>
@if (EditTourVM.Tour == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <div class="row">
            <div class="col">
                <label for="name">Name</label>
                <input type="text" class="form-control" id="name" placeholder="Enter name" @bind="EditTourVM.Tour.Name">
            </div>
            <div class="col">
                <label for="transporttype">Transport Type</label>
                <select class="form-control" id="transporttype" @bind="EditTourVM.Tour.TransportType">
                    @foreach (var type in Enum.GetValues<TransportType>())
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
        </div>

    <div class="form-group mt-3">
        <div class="row">
            <div class="col">
                <label for="from">From</label>
                <input type="text" class="form-control" id="from" placeholder="Enter start" @bind="EditTourVM.Tour.From">
            </div>
            <div class="col">
                <label for="to">To</label>
                <input type="text" class="form-control" id="to" placeholder="Enter destination" @bind="EditTourVM.Tour.To">
            </div>
        </div>
    </div>

    <div class="form-group mt-3">
        <label for="description">Description</label>
        <textarea class="form-control" id="description" placeholder="Enter description" @bind="EditTourVM.Tour.Description"></textarea>
    </div>

    <button class="btn btn-primary mt-3" @onclick="EditTourVM.UpdateTour">Update</button>
}

@code {
    [Parameter]
    public string TourId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await EditTourVM.InitializeAsync(Convert.ToInt32(TourId));
        StateHasChanged();
    }
}
