@page "/tours/{TourId}"

@inject NavigationManager NavManager
@inject TourDetailsPageViewModel TourVM
@using Client.Components
@using Client.ViewModels
@inject IJSRuntime JS
@using Client.Services.FormattingUtils

<PageTitle>@TourVM.Tour.Name</PageTitle>

@if (TourVM.Tour == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="tour-header">
        <div class="d-flex justify-content-between align-items-center mb-4">

            <PageHeader Icon="route">@TourVM.Tour.Name</PageHeader>
            <div>
                <button class="btn btn-danger" @onclick="DeleteTour">
                    Delete
                </button>
                <button class="btn btn-primary" @onclick="EditTour">
                    Edit
                </button>
            </div>
        </div>
        <TpMap ViewModel="@TourVM.MapVM"></TpMap>
        <hr>
        @* Description *@
        <p>@TourVM.Tour.Description</p>
    </div>

    <table class="table tour-table">
        <tbody>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="duration" AltText="#duration"></Icon>
                    </div>
                </div>
            </td>
            <td>Est. time</td>
            <td>@Formatting.SecondsToDaysMinutesHours(TourVM.Tour.EstimatedTime)</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="route" AltText="#route"></Icon>
                    </div>
                </div>
            </td>
            <td>Distance</td>
            <td>@Formatting.MetersToKmAndMeters(TourVM.Tour.Distance)</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="map"></Icon>
                    </div>
                </div>
            </td>
            <td>From</td>
            <td>@TourVM.Tour.From</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="to" AltText="#destination"></Icon>
                    </div>
                </div>
            </td>
            <td>To</td>
            <td>@TourVM.Tour.To</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="transporttype" AltText="#transport-type"></Icon>
                    </div>
                </div>
            </td>
            <td>Transport type</td>
            <td>@TourVM.Tour.TransportType</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="childfriendliness" AltText="#baby"></Icon>
                    </div>
                </div>
            </td>
            <td>Childfriendliness</td>
            <td>
                <div class="progress" style="position: relative;">
                    <div class="progress-bar" role="progressbar" style="width: @(Math.Ceiling(TourVM.Tour.ChildFriendliness) * 10)%"
                         aria-valuenow="@Math.Ceiling(TourVM.Tour.ChildFriendliness)" aria-valuemin="0" aria-valuemax="10">
                    </div>
                    <div class="progress-text" style="color: @(TourVM.Tour.ChildFriendliness < 5 ? "black" : "white; text-shadow:0px 0px 3px black"); position: absolute; top: 0; left: 0; width: 100%; text-align: center;">@Math.Ceiling(TourVM.Tour.ChildFriendliness) / 10</div>
                </div>
            </td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="rating" AltText="<3"></Icon>
                    </div>
                </div>
            </td>
            <td>Popularity</td>
            <td>
                <div class="progress" style="position: relative;">
                    <div class="progress-bar" role="progressbar" style="width: @(Math.Ceiling(TourVM.Tour.Popularity) * 10)%"
                         aria-valuenow="@Math.Ceiling(TourVM.Tour.Popularity)" aria-valuemin="0" aria-valuemax="10">
                    </div>
                    <div class="progress-text" style="color: @(TourVM.Tour.ChildFriendliness < 5 ? "black" : "white; text-shadow:0px 0px 3px black"); position: absolute; top: 0; left: 0; width: 100%; text-align: center;">@Math.Ceiling(TourVM.Tour.Popularity) / 10</div>
                </div>
            </td>
        </tr>
        </tbody>
    </table>

    <ButtonGroup Layout="ButtonGroup.Position.Center">
        <Button Img="add" OnClickCallback="@AddLog" Label="Add Log"/>
        <Button Img="log" Label="Report" OnClickCallback="TourVM.DownloadReportAsync"/>
        <Button Img="importtour" Label="Export as JSON" OnClickCallback="TourVM.ExportTourAsJson" />
    </ButtonGroup>
    
    @if (TourVM.TourLogs.Count > 0)
    {
    <div class="d-flex justify-content-between align-items-center">
        <h2>Logs</h2>
    </div>
        <TourLogsTable TourLogs="@TourVM.TourLogs"></TourLogsTable>
    }
}

@code {
    [Parameter] public string? TourId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(TourId, out int id))
        {
            TourVM.tourId = id;
            await TourVM.InitializeAsync(StateHasChanged);
        }
        else
        {
            NavManager.NavigateTo("/notfound");
        }

    }


    private void EditTour()
    {
        NavManager.NavigateTo($"/edit/{TourId}");
    }

    private void AddLog()
    {
        NavManager.NavigateTo($"/tour/{TourId}/add-log");
    }

    private async void DeleteTour()
    {
        await TourVM.DeleteTour();
        NavManager.NavigateTo("/tours");
    }
}
