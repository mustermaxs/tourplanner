@page "/tours/{TourId}"

@inject NavigationManager NavManager
@inject TourDetailsPageViewModel TourVM
@using Client.Components
@using Client.ViewModels
@inject IJSRuntime JS

<PageTitle>@TourVM.Tour.Name</PageTitle>

@if (TourVM.Tour == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="tour-header">
        <div class="d-flex justify-content-between align-items-center mb-4">

            <PageHeader Icon="route">@TourVM.Tour.Name</PageHeader>
            <div>
                <button class="btn btn-danger" @onclick="DeleteTour">
                    Delete
                </button>
                <button class="btn btn-primary" @onclick="EditTour">
                    Edit
                </button>
            </div>
        </div>
        <hr>
        @* Description *@
        <p>@TourVM.Tour.Description</p>
    </div>


    <table class="table tour-table">
        <tbody>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="duration" AltText="#duration"></Icon>
                    </div>
                </div>
            </td>
            <td>Est. time</td>
            <td>@FormatEstimatedTime(TourVM.Tour.EstimatedTime) h</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="map"></Icon>
                    </div>
                </div>
            </td>
            <td>From</td>
            <td>@TourVM.Tour.From</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="to" AltText="#destination"></Icon>
                    </div>
                </div>
            </td>
            <td>To</td>
            <td>@TourVM.Tour.To</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="transporttype" AltText="#transport-type"></Icon>
                    </div>
                </div>
            </td>
            <td>Transport type</td>
            <td>@TourVM.Tour.TransportType</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="difficulty" AltText="#difficulty"></Icon>
                    </div>
                </div>
            </td>
            <td>Difficulty</td>
            <td>8/10</td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="childfriendliness" AltText="#baby"></Icon>
                    </div>
                </div>
            </td>
            <td>Childfriendliness</td>
            <td>
                <div class="progress" style="position: relative;">
                    <div class="progress-bar" role="progressbar" style="width: @(Math.Ceiling(TourVM.Tour.ChildFriendliness) * 10)%"
                         aria-valuenow="@Math.Ceiling(TourVM.Tour.ChildFriendliness)" aria-valuemin="0" aria-valuemax="10">
                    </div>
                    <div class="progress-text" style="color: @(TourVM.Tour.ChildFriendliness < 5 ? "black" : "white; text-shadow:0px 0px 3px black"); position: absolute; top: 0; left: 0; width: 100%; text-align: center;">@Math.Ceiling(TourVM.Tour.ChildFriendliness) / 10</div>
                </div>
            </td>
        </tr>
        <tr>
            <td class="icon-td">
                <div style="width: 1.7rem">
                    <div class="icon-wrapper">
                        <Icon Img="rating" AltText="<3"></Icon>
                    </div>
                </div>
            </td>
            <td>Popularity</td>
            <td>
                <div class="progress" style="position: relative;">
                    <div class="progress-bar" role="progressbar" style="width: @(Math.Ceiling(TourVM.Tour.Popularity) * 10)%"
                         aria-valuenow="@Math.Ceiling(TourVM.Tour.Popularity)" aria-valuemin="0" aria-valuemax="10">
                    </div>
                    <div class="progress-text" style="color: @(TourVM.Tour.ChildFriendliness < 5 ? "black" : "white; text-shadow:0px 0px 3px black"); position: absolute; top: 0; left: 0; width: 100%; text-align: center;">@Math.Ceiling(TourVM.Tour.Popularity) / 10</div>
                </div>
            </td>
        </tr>
        </tbody>
    </table>

    <TpMap ViewModel="@TourVM.MapVM"></TpMap>

    <ButtonGroup Layout="ButtonGroup.Position.Center">
        <Button Img="add" OnClickCallback="@AddLog" Label="Add Log"/>
        <Button Img="log" Label="Report" OnClickCallback="TourVM.DownloadReportAsync"/>
    </ButtonGroup>

    <div class="d-flex justify-content-between align-items-center">
        <h2>Logs</h2>
    </div>

    <TourLogsTable TourLogs="@TourVM.TourLogs"></TourLogsTable>
}

@code {
    [Parameter] public string? TourId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(TourId);
        TourVM.tourId = Convert.ToInt32(TourId);
        await TourVM.InitializeAsync(StateHasChanged); 

      double lat1 = 52.5200; // Beispiel: Berlin
        double lon1 = 13.4050;
        double lat2 = 48.8566; // Beispiel: Paris
        double lon2 = 2.3522;
        int zoom = 10;

        // Kachelnummern berechnen
        (int x1, int y1) = LatLonToTileNumbers(lat1, lon1, zoom);
        (int x2, int y2) = LatLonToTileNumbers(lat2, lon2, zoom);

        // Bereich bestimmen
        int minX = Math.Min(x1, x2);
        int maxX = Math.Max(x1, x2);
        int minY = Math.Min(y1, y2);
        int maxY = Math.Max(y1, y2);

        // Kacheln herunterladen und speichern
        // using (HttpClient client = new HttpClient())
        // {
        //     for (int x = minX; x <= maxX; x++)
        //     {
        //         for (int y = minY; y <= maxY; y++)
        //         {
        //             string url = $"https://tile.openstreetmap.org/{zoom}/{x}/{y}.png";
        //             byte[] tileData = await client.GetByteArrayAsync(url);
        //
        //             string fileName = $"tile_{zoom}_{x}_{y}.png";
        //             await System.IO.File.WriteAllBytesAsync(fileName, tileData);
        //             Console.WriteLine($"Tile saved as {fileName}");
        //         }
        //     }
        // }
    }

    static (int, int) LatLonToTileNumbers(double lat, double lon, int zoom)
    {
        double latRad = DegToRad(lat);
        double n = Math.Pow(2.0, zoom);
        int xtile = (int)((lon + 180.0) / 360.0 * n);
        int ytile = (int)((1.0 - Math.Log(Math.Tan(latRad) + 1.0 / Math.Cos(latRad)) / Math.PI) / 2.0 * n);
        return (xtile, ytile);
    }

    static double DegToRad(double deg)
    {
        return deg * (Math.PI / 180.0);
    }

    private void EditTour()
    {
        NavManager.NavigateTo($"/edit/{TourId}");
    }

    private void AddLog()
    {
        NavManager.NavigateTo($"/tour/{TourId}/add-log");
    }

    private async void DeleteTour()
    {
        await TourVM.DeleteTour();
        NavManager.NavigateTo("/tours");
    }

    private string FormatEstimatedTime(double minutes) // TODO ins ViewModel geben
    {
        double hours = minutes / 60;
        if (hours % 1 == 0)
        {
            return $"{hours:0}";
        }
        else if ((hours * 10) % 10 == 5)
        {
            return $"{hours:0.0}";
        }
        else
        {
            return $"{hours:0.00}";
        }
    }

}