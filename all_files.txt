using System.Windows.Input;
using Microsoft.AspNetCore.Mvc;
using Tourplanner;
using Tourplanner.Exceptions;
using Tourplanner.Infrastructure;

namespace Api.Controllers;

public abstract class BaseController : ControllerBase
{
    private readonly IMediator Mediator;

    public BaseController(IMediator mediator)
    {
        Mediator = mediator;
    }

    protected async Task<ActionResult<IResponse>> ResponseAsync(IRequest command)
    {
        try
        {
            Console.WriteLine(command.ToString());
            var responseObj = await Mediator.Send(command);
            if (responseObj is null)
            {
                return NotFound();
            }
            return Ok(responseObj);
        }
        catch (ResourceNotFoundException rex)
        {
            Console.WriteLine(rex);
            return BadRequest(rex.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return Problem($"Something went wrong :(");
        }
    }
}﻿using Microsoft.AspNetCore.Mvc;
using Tourplanner;
using Tourplanner.Models;
using Tourplanner.Entities.Tours;
using Tourplanner.DTOs;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Infrastructure;
using Microsoft.AspNetCore.Cors;
using Tourplanner.Entities;
using Tourplanner.Entities.TourLogs.Commands;

namespace Api.Controllers
{
    [ApiController]
    [Route("api")]
    public class SearchController(IMediator mediator) : BaseController(mediator)
    {
        [HttpGet]
        public async Task<ActionResult<IResponse>> SearchInTours([FromQuery] string q)
        {
            var query = new GetSearchResultsQuery(q);

            return await ResponseAsync(query);
        }
    }
}﻿using Microsoft.AspNetCore.Mvc;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TourLogsController : ControllerBase
    {
        // GET: api/<TourLogsController>
        [HttpGet]
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET api/<TourLogsController>/5
        [HttpGet("{id}")]
        public string Get(int id)
        {
            return "value";
        }

        // POST api/<TourLogsController>
        [HttpPost]
        public void Post([FromBody] string value)
        {
        }

        // PUT api/<TourLogsController>/5
        [HttpPut("{id}")]
        public void Put(int id, [FromBody] string value)
        {
        }

        // DELETE api/<TourLogsController>/5
        [HttpDelete("{id}")]
        public void Delete(int id)
        {
        }
    }
}
﻿using Microsoft.AspNetCore.Mvc;
using Tourplanner;
using Tourplanner.Models;
using Tourplanner.Entities.Tours;
using Tourplanner.DTOs;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Infrastructure;
using Microsoft.AspNetCore.Cors;
using Tourplanner.Entities;
using Tourplanner.Entities.TourLogs.Commands;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ToursController(IMediator mediator) : BaseController(mediator)
    {
        [HttpGet]
        public async Task<ActionResult<IResponse>> GetTours()
        {
            var command = new GetToursRequest();
            return await ResponseAsync(command);
        }

        [HttpGet("{tourid}")]
        public async Task<ActionResult<IResponse>> GetTourById(int tourid)
        {
            var command = new GetTourByIdRequest(tourid);
            return await ResponseAsync(command);
        }

        [HttpPost]
        public async Task<ActionResult<IResponse>> CreateTour([FromBody] CreateTourDto createTourDto)
        {
            var command = new CreateTourCommand(
                createTourDto.Name,
                createTourDto.Description,
                createTourDto.From,
                createTourDto.To,
                createTourDto.TransportType
            );
            return await ResponseAsync(command);
        }
        //
        // [HttpGet("search")]
        // public async Task<ActionResult<IResponse>> SearchInTours([FromBody] SearchDto searchDto)
        // {
        //     var query = new GetSearchResultsQuery(searchDto.SearchTerm);
        // }

        [HttpDelete("{tourid}")]
        public async Task<ActionResult<IResponse>> DeleteTour(int tourid)
        {
            var command = new DeleteTourCommand(tourid);
            return await ResponseAsync(command);
        }

        [HttpPut("{tourid}")]
        public async Task<ActionResult<IResponse>> UpdateTour([FromBody] UpdateTourDto updateTourDto,
            [FromRoute] int tourid)
        {
            var command = new UpdateTourCommand(
                tourid,
                updateTourDto.Name,
                updateTourDto.Description,
                updateTourDto.From,
                updateTourDto.To,
                updateTourDto.TransportType
            );

            return await ResponseAsync(command);
        }

        [HttpGet("{tourid}/logs")]
        public async Task<ActionResult<IResponse>> GetLogsForTour(int tourid)
        {
            var command = new GetTourLogsRequest(tourid);
            return await ResponseAsync(command);
        }

        [HttpGet("logs/{logid}")]
        public async Task<ActionResult<IResponse>> GetLog(int logid)
        {
            var command = new GetSingleTourLogRequest(logid);
            return await ResponseAsync(command);
        }
        
        [HttpGet("search")]
        public async Task<ActionResult<IResponse>> SearchInTours([FromQuery] string q)
        {
            var query = new GetSearchResultsQuery(q);

            return await ResponseAsync(query);
        }

        [HttpPost("{tourid}/logs")]
        public async Task<ActionResult<IResponse>> CreateTourLog([FromBody] CreateTourLogDto createTourLogDto,
            int tourid)
        {
            var command = new CreateTourLogCommand(
                tourid,
                DateTime.UtcNow,
                createTourLogDto.Comment,
                createTourLogDto.Difficulty,
                createTourLogDto.TotalTime,
                createTourLogDto.Rating
            );

            return await ResponseAsync(command);
        }

        [HttpPut("logs/{logid}")]
        public async Task<ActionResult<IResponse>> CreateTourLog([FromBody] UpdateTourLogDto updateTourLogDto,
            int logid)
        {
            var command = new UpdateTourLogCommand(
                TourLogId: logid,
                DateTime: DateTime.UtcNow,
                Comment: updateTourLogDto.Comment,
                Difficulty: updateTourLogDto.Difficulty,
                TotalTime: updateTourLogDto.TotalTime,
                Rating: updateTourLogDto.Rating);

            return await ResponseAsync(command);
        }


        [HttpDelete("logs/{logid}")]
        public async Task<ActionResult<IResponse>> DeleteTourLog([FromBody] DeleteTourLogCommand deleteTourLogCommand,
            int logid)
        {
            var command = new DeleteTourLogCommand(logid);

            return await ResponseAsync(command);
        }
    }
}﻿using Microsoft.EntityFrameworkCore;
using Tourplanner.Entities.Tours;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Models;

namespace Tourplanner;

public class TourContext : DbContext
{
    public DbSet<Tour> Tours { get; set; }
    public DbSet<TourLog> TourLogs { get; set; }

    public TourContext(DbContextOptions<TourContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // modelBuilder.Entity<Tour>()
        //     .HasData(
        //         new
        //         {
        //             TourId = 1,
        //             Name = "Example Tour 1",
        //             From = "Origin 1",
        //             To = "Destination 1",
        //             Distance = 100.0f,
        //             Description = "This is an example tour 1.",
        //             EstimatedTime = 2.0f,
        //             ImagePath = "example1.jpg",
        //             Popularity = 4.5f,
        //             ChildFriendliness = 4.0f,
        //             TransportType = TransportType.Car
        //         }
        //     );
        // modelBuilder.Entity<TourLog>()
        //     .HasData(
        //         new TourLog
        //         {
        //             TourLogId = 1,
        //             Difficulty = 3.5f,
        //             Duration = 2.0f,
        //             Rating = 4.0f,
        //             Comment = "This was a great tour!",
        //             TourId = 1,
        //             Date = DateTime.Now
        //         });
        
        // modelBuilder.Entity<Tour>()
        //     .Property(t => t.TransportType)
        //     .HasConversion<int>();
        // //
        // modelBuilder.Entity<TourLog>()
        //     .Property(x => x.TourId)
        //     .HasColumnName("TourId");
        //
        // modelBuilder.Entity<Tour>()
        //     .HasMany<TourLog>(t => t.TourLogs)
        //     .WithOne(to => to.Tour)
        //     .HasForeignKey(t => t.TourId);
        // //
        // modelBuilder.Entity<TourLog>()
        //     .HasOne<Tour>(t => t.Tour)
        //     .WithMany(t => t.TourLogs)
        //     .HasForeignKey(t => t.TourId);
        modelBuilder.Entity<TourLog>()
            .HasOne(tl => tl.Tour)
            .WithMany(t => t.TourLogs)
            .HasForeignKey(tl => tl.TourId)
            .OnDelete(DeleteBehavior.Cascade); // Or whatever behavior you want

        base.OnModelCreating(modelBuilder);


    }

    // protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    // {
    //     optionsBuilder.UseNpgsql("Host=192.168.0.130;Database=tourplanner;Username=tour_admin;Password=tour_admin123");
    // }
}﻿using System;
using System.Linq;
using Tourplanner.Entities;

namespace Tourplanner
{
    public static class DbInitializer
    {
        public static void Initialize(TourContext context)
        {
            context.Database.EnsureCreated();
            context.SaveChanges();
        }
    } 
}﻿using Tourplanner.Models;

namespace Tourplanner.DTOs
{
    public class CreateTourDto
    {
        public CreateTourDto(
            string name,
            string description,
            string from,
            string to,
            float estimatedTime,
            TransportType transportType
        )
        {
            Name = name;
            Description = description;
            From = from;
            To = to;
            EstimatedTime = estimatedTime;
            TransportType = transportType;
        }

        public string Name { get; set; }
        public string Description { get; set; }
        public string From { get; set; }
        public string To { get; set; }
        public float EstimatedTime { get; set; }
        public TransportType TransportType { get; set; }
    }
}﻿namespace Tourplanner.DTOs;

public class CreateTourLogDto(
    string comment,
    float difficulty,
    float totalTime,
    float rating)
{
    public string Comment { get; private set; } = comment;
    public float Difficulty { get; private set; } = difficulty;
    public float TotalTime { get; private set; } = totalTime;
    public float Rating { get; private set; } = rating;
}namespace Tourplanner.DTOs;
using Microsoft.AspNetCore.Mvc;
using Tourplanner.Infrastructure;
public interface IDto : IResponse, IRequest 
{} ﻿namespace Tourplanner.DTOs;

public class SearchDto(string searchTerm, string category, int threshold)
{
    public string SearchTerm { get; private set; } = searchTerm;
    public string Category { get; private set; } = category;
    public int Threshold { get; private set; } = threshold;
}﻿namespace Tourplanner.DTOs
{
    public class SearchResultsDto<TEntity>
    {
        private readonly string SearchTerm;
        private readonly string Category;
        private readonly IEnumerable<TEntity> Matches;

        public SearchResultsDto(string searchTerm, string category, IEnumerable<TEntity> matches)
        {
            SearchTerm = searchTerm;
            Matches = matches;
            Category = category;
        }
    }
}

using System;

namespace Tourplanner.DTOs
{
    using Tourplanner.Models;

    public class TourDto
    {
        public TourDto(
            int id,
            string name,
            string description,
            string from,
            string to,
            TransportType transportType,
            float distance,
            float timespan,
            float popularity,
            float childfriendliness,
            string routeImage
        )
        {
            Id = id;
            Name = name;
            Description = description;
            From = from;
            To = to;
            TransportType = transportType;
            Distance = distance;
            EstimatedTime = timespan;
            Popularity = popularity;
            Childfriendliness = childfriendliness;
            RouteImage = routeImage;
        }
        public int Id { get; protected set; }
        public string Name { get; protected set; }
        public string Description { get; protected set; }
        public string From { get; protected set; }
        public string To { get; protected set; }
        public TransportType TransportType { get; protected set; }
        public float Distance { get; protected set; }
        public float EstimatedTime { get; protected set; }
        public float Popularity { get; protected set; }
        public float Childfriendliness { get; protected set; }
        public string RouteImage { get; protected set; }
    }
}
namespace Tourplanner.DTOs
{
    public class TourLogDto
    {
        public TourLogDto(
            int id,
            int tourId,
            DateTime dateTime,
            string comment,
            float difficulty,
            float totalTime,
            double rating,
            string tourName,
            TourDto tour
        )
        {
            Id = id;
            TourId = tourId;
            DateTime = dateTime;
            Comment = comment;
            Difficulty = difficulty;
            TotalTime = totalTime;
            Rating = rating;
            TourName = tourName;
            Tour = tour;
        }

        public int Id { get; private set; }
        public int TourId { get; private set; }
        public DateTime DateTime { get; private set; }
        public string Comment { get; private set; }
        public float Difficulty { get; private set; }
        public float TotalTime { get; private set; }
        public double Rating { get; private set; }
        public string TourName {get; set;}
        public TourDto Tour {get; set;}
    }
}
﻿using Tourplanner.Models;

namespace Tourplanner.DTOs;

public class UpdateTourDto
{
    public UpdateTourDto(
        string name,
        string description,
        string from,
        string to,
        TransportType transportType)
    {
        Name = name;
        Description = description;
        From = from;
        To = to;
    }

    public string Name { get; set; }
    public string Description { get; set; }
    public string From { get; set; }
    public string To { get; set; }
    public TransportType TransportType { get; set; }
}﻿namespace Tourplanner.DTOs;

public class UpdateTourLogDto(
    int id,
    string comment,
    float difficulty,
    float totalTime,
    float rating)
{
    public int Id { get; private set; } = id;
    public string Comment { get; private set; } = comment;
    public float Difficulty { get; private set; } = difficulty;
    public float TotalTime { get; private set; } = totalTime;
    public float Rating { get; private set; } = rating;
}﻿using Tourplanner.Infrastructure;
using Tourplanner.Repositories;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Services;

namespace Tourplanner.Entities.TourLogs.Commands
{
    public record CreateTourLogCommand(
        int TourId,
        DateTime DateTime,
        string Comment,
        float Difficulty,
        float TotalTime,
        float Rating
    ) : IRequest;
    
    public class CreateTourLogCommandHandler(
        TourContext ctx,
        ITourLogRepository tourLogRepository,
        ITourRepository tourRepository,
        IChildFriendlinessService childFriendlinessService,
        IRatingService ratingService) : RequestHandler<CreateTourLogCommand, Task>(ctx)
    {
        public override async Task<Task> Handle(CreateTourLogCommand request)
        {
            var tourLog = new TourLog();
            tourLog.TourId = request.TourId;
            tourLog.Date = request.DateTime;
            tourLog.Comment = request.Comment;
            tourLog.Difficulty = request.Difficulty;
            tourLog.Duration = request.TotalTime;
            tourLog.Rating = request.Rating;
            await tourLogRepository.Create(tourLog);

            var tour = await tourRepository.Get(request.TourId);
            tour.Popularity = ratingService.Calculate(await tourLogRepository.GetTourLogsForTour(request.TourId));
            tour.ChildFriendliness = await childFriendlinessService.Calculate(tour.Id);
            await tourRepository.UpdateAsync(tour);
            
            return Task.CompletedTask;
        }
    }
}

﻿using Tourplanner.Exceptions;
using Tourplanner.Infrastructure;
using Tourplanner.Repositories;

namespace Tourplanner.Entities.TourLogs
{
    public record DeleteTourLogCommand(int TourLogId) : IRequest;
    
    public class DeleteTourLogCommandHandler(
        TourContext ctx,
        ITourLogRepository tourLogRepository)
    : RequestHandler<DeleteTourLogCommand, Task>(ctx)
    {
        public override async Task<Task> Handle(DeleteTourLogCommand request)
        {
            var tourLog = await tourLogRepository.Get(request.TourLogId);


            if (tourLog is null)
            {
                throw new ResourceNotFoundException($"Tour log {request.TourLogId} could not be found");
            }
            
            await tourLogRepository.Delete(tourLog);

            return Task.CompletedTask;
        }
    }
}

﻿using Tourplanner.DTOs;
using Tourplanner.Exceptions;
using Tourplanner.Infrastructure;
using Tourplanner.Repositories;
using Tourplanner.Services;

namespace Tourplanner.Entities.TourLogs
{
    public record GetSingleTourLogRequest(int LogId) : IRequest;

    public class GetSingleTourLogRequestHandler(
        TourContext ctx,
        ITourLogRepository tourLogRepository,
        ITourRepository tourRepository,
        IRatingService ratingService)
        : RequestHandler<GetSingleTourLogRequest, TourLogDto>(ctx)
    {
        public override async Task<TourLogDto> Handle(GetSingleTourLogRequest request)
        {
            var log = await tourLogRepository.Get(request.LogId);
            var logs = (await tourRepository.GetTourWithLogs(log.TourId)).TourLogs;
            var tour = await tourRepository.Get(log.TourId);

            if (log is null)
            {
                throw new ResourceNotFoundException($"Log {request.LogId} doesn't seem to exist");
            }

            var tourLogDto =
                new TourLogDto(
                    id: log.TourLogId,
                    tourId: log.TourId,
                    dateTime: log.Date,
                    comment: log.Comment,
                    difficulty: log.Difficulty,
                    totalTime: log.Duration,
                    rating: log.Rating,
                    tourName: tour.Name,
                    tour: new TourDto(
                        id: tour.Id,
                        name: tour.Name,
                        description: tour.Description,
                        from: tour.From,
                        to: tour.To,
                        transportType: tour.TransportType,
                        distance: tour.Distance,
                        timespan: tour.EstimatedTime,
                        popularity: tour.Popularity,
                        childfriendliness: tour.ChildFriendliness,
                        routeImage: tour.ImagePath
                    ));
            return tourLogDto;
        }
    }
}﻿using Tourplanner.DTOs;
using Tourplanner.Infrastructure;
using Tourplanner.Repositories;
using Tourplanner.Exceptions;

namespace Tourplanner.Entities.TourLogs.Commands
{
    public record GetTourLogsRequest(int TourId) : IRequest;

    public class GetTourLogsRequestHandler(
        TourContext ctx,
        ITourLogRepository tourLogRepository,
        ITourRepository tourRepository)
        : RequestHandler<GetTourLogsRequest, IEnumerable<TourLogDto>>(ctx)
    {
        public override async Task<IEnumerable<TourLogDto>> Handle(GetTourLogsRequest request)
        {
            var tourLogs = await tourLogRepository.GetTourLogsForTour(request.TourId);
            var tour = await tourRepository.Get(request.TourId);

            if (tourLogs is null || tour is null)
            {
                throw new ResourceNotFoundException("Cant find tour log / tour");
            }

            var tourLogDtos = new List<TourLogDto>();

            foreach (var log in tourLogs)
            {
                tourLogDtos.Add(new TourLogDto(
                    id: log.TourLogId,
                    tourId: log.TourId,
                    dateTime: log.Date,
                    comment: log.Comment,
                    difficulty: log.Difficulty,
                    totalTime: log.Duration,
                    rating: log.Rating,
                    tourName: tour.Name,
                    tour: new TourDto(
                        id: tour.Id,
                        name: tour.Name,
                        description: tour.Description,
                        from: tour.From,
                        to: tour.To,
                        transportType: tour.TransportType,
                        distance: tour.Distance,
                        timespan: tour.EstimatedTime,
                        popularity: tour.Popularity,
                        childfriendliness: tour.ChildFriendliness,
                        routeImage: tour.ImagePath
                    )
                ));
            }
            return await Task.FromResult<IEnumerable<TourLogDto>>(tourLogDtos.ToList());
        }
    }
}

﻿using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Tourplanner.DTOs;
using Tourplanner.Entities.Tours;

namespace Tourplanner.Entities.TourLogs
{
    public class TourLog
    {
        public int TourLogId { get; set; }
        public float Difficulty { get; set; }
        public float Duration { get; set; }
        public float Rating { get; set; }
    
        [MaxLength(500)]
        public string Comment { get; set; } = String.Empty;
        public int TourId { get; set; }

        public Tour Tour { get; set; } = null!;

        public DateTime Date { get; set; }
    }

    public static class TourLogExtensionMethods
    {
        public static TourLogDto ToTourLogDto(this TourLog log)
        {
            return new TourLogDto(
                log.TourLogId,
                log.TourId,
                log.Date,
                log.Comment,
                log.Difficulty,
                log.Duration,
                log.Rating,
                log.Tour.Name,
                log.Tour.ToTourDto());
        }
    }
}﻿using Tourplanner.Exceptions;
using Tourplanner.Infrastructure;
using Tourplanner.Repositories;

namespace Tourplanner.Entities.TourLogs.Commands
{
    public record UpdateTourLogCommand(
        int TourLogId,
        DateTime DateTime,
        string Comment,
        float Difficulty,
        float TotalTime,
        float Rating
    ) : IRequest;
    
    public class UpdateTourLogCommandHandler(
        TourContext ctx,
        ITourLogRepository tourLogRepository)
    : RequestHandler<UpdateTourLogCommand, Task>(ctx)
    {
        public override async Task<Task> Handle(UpdateTourLogCommand request)
        {
            var tourLog = await tourLogRepository.Get(request.TourLogId);

            if (tourLog is null)
            {
                throw new ResourceNotFoundException($"Tour log entry {request.TourLogId} doesn't seem to exist");
            }
            
            tourLog.Date = request.DateTime;
            tourLog.Comment = request.Comment;
            tourLog.Difficulty = request.Difficulty;
            tourLog.Duration = request.TotalTime;
            tourLog.Rating = request.Rating;
            tourLog.TourLogId = request.TourLogId;

            await tourLogRepository.UpdateAsync(tourLog);

            return Task.CompletedTask;
        }
    }
}

﻿using Microsoft.EntityFrameworkCore.ChangeTracking;
using Tourplanner.DTOs;
using Tourplanner.Infrastructure;
using Tourplanner.Models;
using Tourplanner.Repositories;
using Tourplanner.Services;

namespace Tourplanner.Entities.Tours
{
    public record CreateTourCommand
    (
        string Name,
        string Description,
        string From,
        string To,
        TransportType TransportType
    ): IRequest;

    public class CreateTourCommandHandler(
        TourContext ctx,
        ITourRepository tourRepository,
        IChildFriendlinessService childFriendlinessService) : RequestHandler<CreateTourCommand, Task>(ctx)
    {
        public override async Task<Task> Handle(CreateTourCommand request)
        {
            var tour = new Tour();
            tour.Name = request.Name;
            tour.Description = request.Description;
            tour.From = request.From;
            tour.To = request.To;
            tour.TransportType = request.TransportType;
            tour.Popularity = 0.0f;

            var tourId = await tourRepository.CreateReturnId(tour); // TODO return Id
            tour.ChildFriendliness = await childFriendlinessService.Calculate(tourId);
            return Task.CompletedTask;
        }
    }
}
using Tourplanner.Exceptions;
using Tourplanner.Repositories;

namespace Tourplanner.Entities.Tours;

using Tourplanner.Infrastructure;

public record DeleteTourCommand(int Id) : IRequest;

public class DeleteTourCommandHandler(
    TourContext ctx,
    ITourRepository tourRepository)
    : RequestHandler<DeleteTourCommand, Task>(ctx)
{
    public override async Task<Task> Handle(DeleteTourCommand command)
    {
        var tour = await tourRepository.Get(command.Id);

        if (tour is null)
        {
            throw new ResourceNotFoundException($"Tour {command.Id} could not be found");
        }
        
        await tourRepository.Delete(tour);
        return Task.CompletedTask;
    }
}﻿using Microsoft.EntityFrameworkCore;
using Tourplanner.Infrastructure;
using Tourplanner.Services.Search;
using Tourplanner.DTOs;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Repositories;

namespace Tourplanner.Entities.Tours
{
    public record GetSearchResultsQuery(
        string SearchTerm
    ) : IRequest;

    public class GetSearchResultsQueryHandler(
        TourContext ctx,
        ITourRepository tourRepository,
        ITourLogRepository tourLogRepository,
        ISearchService searchService)
        : RequestHandler<GetSearchResultsQuery, IEnumerable<SearchResultsDto<object>>>(ctx)
    {
        public override async Task<IEnumerable<SearchResultsDto<object>>> Handle(GetSearchResultsQuery query)
        {
            var searchTerm = query.SearchTerm ?? string.Empty;
            var tours = await tourRepository.GetAll();
            var tourlogs = await tourLogRepository.GetAll();

            var searchables = new List<string>();
            var results = new List<SearchResultsDto<object>>();

            var tourMatches = await ctx.Tours.Where(tour =>
                    EF.Functions.ILike(tour.Name, $"%{searchTerm}%") ||
                    EF.Functions.ILike(tour.Description, $"%{searchTerm}%") ||
                    EF.Functions.ILike(tour.From, $"%{searchTerm}%") ||
                    EF.Functions.ILike(tour.To, $"%{searchTerm}%"))
                .Select(match => match.ToTourDto())
                .ToListAsync();

            var tourSearchResults = new SearchResultsDto<object>(query.SearchTerm, "Tours", tourMatches);

            var tourLogMatches = await ctx.TourLogs
                .Where(log =>
                    EF.Functions.ILike(log.Comment, $"%{searchTerm}%"))
                .Select(log => log.ToTourLogDto())
                .ToListAsync();

            var logSearchResults = new SearchResultsDto<object>(query.SearchTerm, "TourLogs", tourLogMatches);

            results.Add(tourSearchResults);
            results.Add(logSearchResults);

            return results;
        }
    }
}using Microsoft.EntityFrameworkCore.ChangeTracking;
using Tourplanner.DTOs;
using Tourplanner.Exceptions;
using Tourplanner.Models;
using Tourplanner.Repositories;
using Tourplanner.Infrastructure;
using Tourplanner.Services;

namespace Tourplanner.Entities.Tours
{
    public record GetTourByIdRequest(int Id) : IRequest;

    public class GetTourByIdCommandHandler(
        TourContext ctx,
        ITourRepository tourRepository,
        ITourLogRepository tourLogRepository,
        IRatingService ratingService,
        IChildFriendlinessService childFriendlinessService)
        : RequestHandler<GetTourByIdRequest, TourDto>(ctx)
    {
        public override async Task<TourDto> Handle(GetTourByIdRequest request)
        {
            var tour = await tourRepository.GetTourWithLogs(request.Id);

            if (tour is null)
            {
                throw new ResourceNotFoundException($"Tour {request.Id} doesn't seem to exist.");
            }

            var childFriendliness = await childFriendlinessService.Calculate(tour.Id);
            var popularity = ratingService.Calculate(tour.TourLogs);
            
            return await Task.FromResult(new TourDto(
                tour.Id,
                tour.Name,
                tour.Description,
                tour.From,
                tour.To,
                tour.TransportType,
                tour.Distance,
                tour.EstimatedTime,
                popularity,
                childFriendliness,
                tour.ImagePath));
            
        }
    }
}﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.OpenApi.Extensions;
using Tourplanner.DTOs;
using Tourplanner.Models;
using Tourplanner.Infrastructure;
using Tourplanner.Repositories;
using Tourplanner.Services;

namespace Tourplanner.Entities.Tours
{
    public record GetToursRequest : IRequest
    {
    }

    public class GetToursCommandHandler(
        TourContext ctx,
        ITourRepository tourRepository,
        IChildFriendlinessService childFriendlinessService)
        : RequestHandler<GetToursRequest, IEnumerable<TourDto>>(ctx)
    {
        
        public override async Task<IEnumerable<TourDto>> Handle(GetToursRequest request)
        {
            var tourEntities = await tourRepository.GetAll();
            var tourDtos = new List<TourDto>();
            
            foreach (var tour in tourEntities)
            {
                var childFriendliness = childFriendlinessService.Calculate(tour.Id);
                tourDtos.Add(new TourDto(
                    tour.Id,
                    tour.Name,
                    tour.Description,
                    tour.From,
                    tour.To,
                    tour.TransportType,
                    tour.Distance,
                    tour.EstimatedTime,
                    tour.Popularity,
                    tour.ChildFriendliness,
                    tour.ImagePath
                ));
            }
            // TODO 
            // var tourDtos = tourEntities.Select(
            //     tour =>
            //         new TourDto(
            //             tour.TourId,
            //             tour.Description,
            //             tour.Name,
            //             tour.From,
            //             tour.To,
            //             tour.TransportType,
            //             tour.Distance,
            //             tour.EstimatedTime,
            //             tour.Popularity,
            //             tour.ChildFriendliness,
            //             tour.ImagePath
            //         ));
            return await Task.FromResult(tourDtos);
        }
    }
}﻿using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Tourplanner.DTOs;
using Tourplanner.Models;
using Tourplanner.Entities.TourLogs;

namespace Tourplanner.Entities.Tours
{

    public class Tour
    {
        public Tour()
        {
            TourLogs = new List<TourLog>();
        }

        public int Id { get; set; }

        [MaxLength(60)] public string Name { get; set; }

        [MaxLength(150)] public string From { get; set; }

        [MaxLength(150)] public string To { get; set; }

        public float Distance { get; set; }

        [MaxLength(500)] public string Description { get; set; }

        public float EstimatedTime { get; set; }

        [MaxLength(150)] public string ImagePath { get; set; } = string.Empty;

        public float Popularity { get; set; }

        public float ChildFriendliness { get; set; }

        public ICollection<TourLog> TourLogs { get; set; }

        public TransportType TransportType { get; set; }
    }

    public static class TourExtensionMethods
    {
        public static TourDto ToTourDto(this Tour tour)
        {
            return new TourDto(
                tour.Id,
                tour.Name,
                tour.Description,
                tour.From,
                tour.To,
                tour.TransportType,
                tour.Distance,
                tour.EstimatedTime,
                tour.Popularity,
                tour.ChildFriendliness,
                tour.ImagePath
                );
        }
    }
    
}﻿using Tourplanner.Exceptions;
using Tourplanner.Infrastructure;
using Tourplanner.Models;
using Tourplanner.Repositories;
using Tourplanner.Services;

namespace Tourplanner.Entities.Tours
{
    public record UpdateTourCommand(
        int Id,
        string Name,
        string Description,
        string From,
        string To,
        TransportType TransportType
    ) : IRequest;

    public class UpdateTourCommandHandler(
        TourContext ctx,
        ITourRepository tourRepository,
        IRatingService ratingService,
        IChildFriendlinessService childFriendlinessService)
        : RequestHandler<UpdateTourCommand, Task>(ctx)
    {
        public override async Task<Task> Handle(UpdateTourCommand command)
        {
            var entityToUpdate = await tourRepository.GetTourWithLogs(command.Id);

            if (entityToUpdate is null)
            {
                throw new ResourceNotFoundException($"Tour '{command.Name}', #{command.Id} could not be found");
            }

            entityToUpdate.Name = command.Name;
            entityToUpdate.Description = command.Description;
            entityToUpdate.From = command.From;
            entityToUpdate.To = command.To;
            entityToUpdate.Popularity = ratingService.Calculate(entityToUpdate.TourLogs);
            entityToUpdate.ChildFriendliness = await childFriendlinessService.Calculate(entityToUpdate.Id);
            entityToUpdate.TransportType = command.TransportType;

            await tourRepository.UpdateAsync(entityToUpdate);
            return Task.CompletedTask;
        }
    }
}

﻿namespace Tourplanner.Exceptions;

public class ResourceNotFoundException : Exception
{
    public ResourceNotFoundException(){}

    public ResourceNotFoundException(string message) : base(message)
    {
    }
    public ResourceNotFoundException(string message, Exception inner) : base(message, inner)
    {
    }
}using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Tourplanner.DTOs;

namespace Tourplanner.Infrastructure
{
    public interface ICommandHandler
    {
    }

    public abstract class RequestHandler<TRequest, TResponse> : ICommandHandler
        where TRequest : IRequest
    {
        protected TourContext dbContext;

        public RequestHandler(TourContext context)
        {
            dbContext = context;
        }

        public abstract Task<TResponse> Handle(TRequest request);
    }

    public interface IResponse
    {
    }

    public interface IPublisher
    {
    }
}namespace Tourplanner.Infrastructure;

public interface IRequest
{
    
}using System.Reflection;
using Tourplanner.Entities.Tours;
using Microsoft.EntityFrameworkCore;
using Tourplanner.DTOs;
using Tourplanner.Entities;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Entities.TourLogs.Commands;

namespace Tourplanner;

using Tourplanner.Infrastructure;

public abstract class IMediator
{
    protected Dictionary<string, Type> _CommandCommandHandlerMapping = new Dictionary<string, Type>();
    protected DbContext _dbContext;
    private readonly IServiceProvider _serviceProvider;


    protected IMediator(DbContext dbContext, IServiceProvider serviceProvider)
    {
        _dbContext = dbContext;
        _serviceProvider = serviceProvider;

        RegisterPublishers();
    }

    public async Task<object?> Send(IRequest request)
    {
        var commandName = request.GetType().Name;
        if (!_CommandCommandHandlerMapping.TryGetValue(commandName, out Type? commandHandlerType))
        {
            throw new Exception($"Command {commandName} unknown");
        }

        var requestType =
            commandHandlerType.GetMethod("Handle")!
                .GetParameters()[0]
                .ParameterType;
        var responseType = commandHandlerType.GetMethod("Handle")!
            .ReturnType;

        var commandHandler = _serviceProvider.GetServices(typeof(ICommandHandler))
            .First(h => h?.GetType().Name == commandHandlerType.Name);
            
        var handleMethod = commandHandlerType.GetMethod("Handle");
        var commandResultTask = (Task)handleMethod!.Invoke(commandHandler, new object[] { request });

        await commandResultTask.ConfigureAwait(false);

        var commandResult = commandResultTask
            .GetType()
            .GetProperty("Result")
            ?.GetValue(commandResultTask);

        return commandResult;
    }

    public bool Register<TCommand, TCommandHandler>()
        where TCommand : IRequest
    {
        var commandName = typeof(TCommand).Name;
        return _CommandCommandHandlerMapping.TryAdd(commandName, typeof(TCommandHandler));
    }

    public abstract void RegisterPublishers();
}

public class Mediator : IMediator
{
    public Mediator(DbContext context, IServiceProvider serviceProvider) : base(context, serviceProvider)
    {
    }

    public override void RegisterPublishers()
    {
        Register<GetToursRequest, GetToursCommandHandler>();
        Register<GetTourByIdRequest, GetTourByIdCommandHandler>();
        Register<CreateTourCommand, CreateTourCommandHandler>();
        Register<UpdateTourCommand, UpdateTourCommandHandler>();
        Register<DeleteTourCommand, DeleteTourCommandHandler>();
        Register<GetTourLogsRequest, GetTourLogsRequestHandler>();
        Register<GetSingleTourLogRequest, GetSingleTourLogRequestHandler>();
        Register<CreateTourLogCommand, CreateTourLogCommandHandler>();
        Register<UpdateTourLogCommand, UpdateTourLogCommandHandler>();
        Register<DeleteTourLogCommand, DeleteTourLogCommandHandler>();
        Register<GetSearchResultsQuery, GetSearchResultsQueryHandler>();
    }

    public void DiscoverPublishers()
    {
    }
}﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Tours",
                columns: table => new
                {
                    TourId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(type: "text", nullable: false),
                    From = table.Column<string>(type: "text", nullable: false),
                    To = table.Column<string>(type: "text", nullable: false),
                    Distance = table.Column<float>(type: "real", nullable: false),
                    EstimatedTime = table.Column<TimeSpan>(type: "interval", nullable: false),
                    ImagePath = table.Column<string>(type: "text", nullable: false),
                    Popularity = table.Column<float>(type: "real", nullable: false),
                    ChildFriendliness = table.Column<float>(type: "real", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tours", x => x.TourId);
                });

            migrationBuilder.CreateTable(
                name: "TourLogs",
                columns: table => new
                {
                    TourLogId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Distance = table.Column<float>(type: "real", nullable: false),
                    Difficulty = table.Column<float>(type: "real", nullable: false),
                    Duration = table.Column<TimeSpan>(type: "interval", nullable: false),
                    Rating = table.Column<float>(type: "real", nullable: false),
                    Comment = table.Column<string>(type: "text", nullable: false),
                    TourId = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TourLogs", x => x.TourLogId);
                    table.ForeignKey(
                        name: "FK_TourLogs_Tours_TourId",
                        column: x => x.TourId,
                        principalTable: "Tours",
                        principalColumn: "TourId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_TourLogs_TourId",
                table: "TourLogs",
                column: "TourId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "TourLogs");

            migrationBuilder.DropTable(
                name: "Tours");
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240507195523_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class Migration_1 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Distance",
                table: "TourLogs");

            migrationBuilder.AlterColumn<string>(
                name: "To",
                table: "Tours",
                type: "character varying(150)",
                maxLength: 150,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Tours",
                type: "character varying(30)",
                maxLength: 30,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "ImagePath",
                table: "Tours",
                type: "character varying(150)",
                maxLength: 150,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AlterColumn<string>(
                name: "From",
                table: "Tours",
                type: "character varying(150)",
                maxLength: 150,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.AddColumn<string>(
                name: "Description",
                table: "Tours",
                type: "character varying(500)",
                maxLength: 500,
                nullable: false,
                defaultValue: "");

            migrationBuilder.AlterColumn<string>(
                name: "Comment",
                table: "TourLogs",
                type: "character varying(500)",
                maxLength: 500,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Description",
                table: "Tours");

            migrationBuilder.AlterColumn<string>(
                name: "To",
                table: "Tours",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(150)",
                oldMaxLength: 150);

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Tours",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(30)",
                oldMaxLength: 30);

            migrationBuilder.AlterColumn<string>(
                name: "ImagePath",
                table: "Tours",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(150)",
                oldMaxLength: 150);

            migrationBuilder.AlterColumn<string>(
                name: "From",
                table: "Tours",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(150)",
                oldMaxLength: 150);

            migrationBuilder.AlterColumn<string>(
                name: "Comment",
                table: "TourLogs",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(500)",
                oldMaxLength: 500);

            migrationBuilder.AddColumn<float>(
                name: "Distance",
                table: "TourLogs",
                type: "real",
                nullable: false,
                defaultValue: 0f);
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240508075727_Migration_1")]
    partial class Migration_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasPrecision(5, 3)
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasPrecision(10, 3)
                        .HasColumnType("real");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<float>("Popularity")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class Migration_2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.InsertData(
                table: "Tours",
                columns: new[] { "TourId", "ChildFriendliness", "Description", "Distance", "EstimatedTime", "From", "ImagePath", "Name", "Popularity", "To" },
                values: new object[] { 1, 4f, "This is an example tour 1.", 100f, new TimeSpan(0, 2, 0, 0, 0), "Origin 1", "example1.jpg", "Example Tour 1", 4.5f, "Destination 1" });

            migrationBuilder.InsertData(
                table: "TourLogs",
                columns: new[] { "TourLogId", "Comment", "Difficulty", "Duration", "Rating", "TourId" },
                values: new object[] { 1, "This was a great tour!", 3.5f, new TimeSpan(0, 1, 0, 0, 0), 4f, 1 });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DeleteData(
                table: "TourLogs",
                keyColumn: "TourLogId",
                keyValue: 1);

            migrationBuilder.DeleteData(
                table: "Tours",
                keyColumn: "TourId",
                keyValue: 1);
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240510092543_Migration_2")]
    partial class Migration_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasPrecision(5, 3)
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasPrecision(10, 3)
                        .HasColumnType("real");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<float>("Popularity")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("TourId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            ChildFriendliness = 4f,
                            Description = "This is an example tour 1.",
                            Distance = 100f,
                            EstimatedTime = new TimeSpan(0, 2, 0, 0, 0),
                            From = "Origin 1",
                            ImagePath = "example1.jpg",
                            Name = "Example Tour 1",
                            Popularity = 4.5f,
                            To = "Destination 1"
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");

                    b.HasData(
                        new
                        {
                            TourLogId = 1,
                            Comment = "This was a great tour!",
                            Difficulty = 3.5f,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Rating = 4f,
                            TourId = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class Tour_with_transporttype : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "TransportType",
                table: "Tours",
                type: "integer",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.UpdateData(
                table: "Tours",
                keyColumn: "TourId",
                keyValue: 1,
                column: "TransportType",
                value: 1);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "TransportType",
                table: "Tours");
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240510163445_Tour_with_transporttype")]
    partial class Tour_with_transporttype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasPrecision(5, 3)
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasPrecision(10, 3)
                        .HasColumnType("real");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<float>("Popularity")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            ChildFriendliness = 4f,
                            Description = "This is an example tour 1.",
                            Distance = 100f,
                            EstimatedTime = new TimeSpan(0, 2, 0, 0, 0),
                            From = "Origin 1",
                            ImagePath = "example1.jpg",
                            Name = "Example Tour 1",
                            Popularity = 4.5f,
                            To = "Destination 1",
                            TransportType = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");

                    b.HasData(
                        new
                        {
                            TourLogId = 1,
                            Comment = "This was a great tour!",
                            Difficulty = 3.5f,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Rating = 4f,
                            TourId = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class ChangeDefaultValues : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240510171540_ChangeDefaultValues")]
    partial class ChangeDefaultValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasPrecision(5, 3)
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasPrecision(10, 3)
                        .HasColumnType("real");

                    b.Property<TimeSpan>("EstimatedTime")
                        .HasColumnType("interval");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<float>("Popularity")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            ChildFriendliness = 4f,
                            Description = "This is an example tour 1.",
                            Distance = 100f,
                            EstimatedTime = new TimeSpan(0, 2, 0, 0, 0),
                            From = "Origin 1",
                            ImagePath = "example1.jpg",
                            Name = "Example Tour 1",
                            Popularity = 4.5f,
                            To = "Destination 1",
                            TransportType = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");

                    b.HasData(
                        new
                        {
                            TourLogId = 1,
                            Comment = "This was a great tour!",
                            Difficulty = 3.5f,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Rating = 4f,
                            TourId = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class Change_types : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<float>(
                name: "EstimatedTime",
                table: "Tours",
                type: "real",
                nullable: false,
                oldClrType: typeof(TimeSpan),
                oldType: "interval");

            migrationBuilder.AlterColumn<float>(
                name: "Duration",
                table: "TourLogs",
                type: "real",
                nullable: false,
                oldClrType: typeof(TimeSpan),
                oldType: "interval");

            migrationBuilder.AddColumn<DateTime>(
                name: "Date",
                table: "TourLogs",
                type: "timestamp with time zone",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

            migrationBuilder.UpdateData(
                table: "TourLogs",
                keyColumn: "TourLogId",
                keyValue: 1,
                columns: new[] { "Date", "Duration" },
                values: new object[] { new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), 2f });

            migrationBuilder.UpdateData(
                table: "Tours",
                keyColumn: "TourId",
                keyValue: 1,
                column: "EstimatedTime",
                value: 2f);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Date",
                table: "TourLogs");

            migrationBuilder.AlterColumn<TimeSpan>(
                name: "EstimatedTime",
                table: "Tours",
                type: "interval",
                nullable: false,
                oldClrType: typeof(float),
                oldType: "real");

            migrationBuilder.AlterColumn<TimeSpan>(
                name: "Duration",
                table: "TourLogs",
                type: "interval",
                nullable: false,
                oldClrType: typeof(float),
                oldType: "real");

            migrationBuilder.UpdateData(
                table: "TourLogs",
                keyColumn: "TourLogId",
                keyValue: 1,
                column: "Duration",
                value: new TimeSpan(0, 1, 0, 0, 0));

            migrationBuilder.UpdateData(
                table: "Tours",
                keyColumn: "TourId",
                keyValue: 1,
                column: "EstimatedTime",
                value: new TimeSpan(0, 2, 0, 0, 0));
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240511131721_Change_types")]
    partial class Change_types
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasPrecision(5, 3)
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasPrecision(10, 3)
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<float>("Popularity")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            ChildFriendliness = 4f,
                            Description = "This is an example tour 1.",
                            Distance = 100f,
                            EstimatedTime = 2f,
                            From = "Origin 1",
                            ImagePath = "example1.jpg",
                            Name = "Example Tour 1",
                            Popularity = 4.5f,
                            To = "Destination 1",
                            TransportType = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");

                    b.HasData(
                        new
                        {
                            TourLogId = 1,
                            Comment = "This was a great tour!",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3.5f,
                            Duration = 2f,
                            Rating = 4f,
                            TourId = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class ChangeToDateTime : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "Date",
                table: "TourLogs",
                newName: "DateTime");

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Tours",
                type: "character varying(60)",
                maxLength: 60,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(30)",
                oldMaxLength: 30);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "DateTime",
                table: "TourLogs",
                newName: "Date");

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Tours",
                type: "character varying(30)",
                maxLength: 30,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(60)",
                oldMaxLength: 60);
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240512210004_ChangeToDateTime")]
    partial class ChangeToDateTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasPrecision(5, 3)
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasPrecision(10, 3)
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            ChildFriendliness = 4f,
                            Description = "This is an example tour 1.",
                            Distance = 100f,
                            EstimatedTime = 2f,
                            From = "Origin 1",
                            ImagePath = "example1.jpg",
                            Name = "Example Tour 1",
                            Popularity = 4.5f,
                            To = "Destination 1",
                            TransportType = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");

                    b.HasData(
                        new
                        {
                            TourLogId = 1,
                            Comment = "This was a great tour!",
                            DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Difficulty = 3.5f,
                            Duration = 2f,
                            Rating = 4f,
                            TourId = 1
                        });
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLog.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tour.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class TourLogsToTourEntity : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DeleteData(
                table: "TourLogs",
                keyColumn: "TourLogId",
                keyValue: 1);

            migrationBuilder.DeleteData(
                table: "Tours",
                keyColumn: "TourId",
                keyValue: 1);

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Tours",
                type: "character varying(60)",
                maxLength: 60,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(30)",
                oldMaxLength: 30);

            migrationBuilder.AddColumn<int>(
                name: "TourId1",
                table: "TourLogs",
                type: "integer",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateIndex(
                name: "IX_TourLogs_TourId1",
                table: "TourLogs",
                column: "TourId1");

            migrationBuilder.AddForeignKey(
                name: "FK_TourLogs_Tours_TourId1",
                table: "TourLogs",
                column: "TourId1",
                principalTable: "Tours",
                principalColumn: "TourId",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_TourLogs_Tours_TourId1",
                table: "TourLogs");

            migrationBuilder.DropIndex(
                name: "IX_TourLogs_TourId1",
                table: "TourLogs");

            migrationBuilder.DropColumn(
                name: "TourId1",
                table: "TourLogs");

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Tours",
                type: "character varying(30)",
                maxLength: 30,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(60)",
                oldMaxLength: 60);

            migrationBuilder.InsertData(
                table: "Tours",
                columns: new[] { "TourId", "ChildFriendliness", "Description", "Distance", "EstimatedTime", "From", "ImagePath", "Name", "Popularity", "To", "TransportType" },
                values: new object[] { 1, 4f, "This is an example tour 1.", 100f, 2f, "Origin 1", "example1.jpg", "Example Tour 1", 4.5f, "Destination 1", 1 });

            migrationBuilder.InsertData(
                table: "TourLogs",
                columns: new[] { "TourLogId", "Comment", "Date", "Difficulty", "Duration", "Rating", "TourId" },
                values: new object[] { 1, "This was a great tour!", new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), 3.5f, 2f, 4f, 1 });
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240513081838_TourLogsToTourEntity")]
    partial class TourLogsToTourEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.Property<int>("TourId1")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.HasIndex("TourId1");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tours.Tour", null)
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourplanner.Entities.Tours.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class TourLogsToTourEntity_4 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_TourLogs_Tours_TourId",
                table: "TourLogs");

            migrationBuilder.DropIndex(
                name: "IX_TourLogs_TourId",
                table: "TourLogs");

            migrationBuilder.DropColumn(
                name: "TourId",
                table: "TourLogs");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "TourId",
                table: "TourLogs",
                type: "integer",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateIndex(
                name: "IX_TourLogs_TourId",
                table: "TourLogs",
                column: "TourId");

            migrationBuilder.AddForeignKey(
                name: "FK_TourLogs_Tours_TourId",
                table: "TourLogs",
                column: "TourId",
                principalTable: "Tours",
                principalColumn: "TourId",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240513084046_TourLogsToTourEntity_4")]
    partial class TourLogsToTourEntity_4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tours.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class TourLogsToTourEntity_7 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240513092658_TourLogsToTourEntity_7")]
    partial class TourLogsToTourEntity_7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tours.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class TourLogsToTourEntity_8 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240513095351_TourLogsToTourEntity_8")]
    partial class TourLogsToTourEntity_8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tours.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Api.Migrations
{
    /// <inheritdoc />
    public partial class TourLogsToTourEntity_9 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20240513140821_TourLogsToTourEntity_9")]
    partial class TourLogsToTourEntity_9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tours.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tourplanner;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(TourContext))]
    partial class TourContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.Property<int>("TourLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourLogId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("integer");

                    b.HasKey("TourLogId");

                    b.HasIndex("TourId");

                    b.ToTable("TourLogs");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("ChildFriendliness")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("EstimatedTime")
                        .HasColumnType("real");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<float>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourplanner.Entities.TourLogs.TourLog", b =>
                {
                    b.HasOne("Tourplanner.Entities.Tours.Tour", "Tour")
                        .WithMany("TourLogs")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourplanner.Entities.Tours.Tour", b =>
                {
                    b.Navigation("TourLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
namespace Tourplanner.Models;
using Tourplanner.DTOs;

// OBSOLETE ?
public interface IEntity
{
    
}

// TODO in jedes Model file extension method schreiben
// um DTO für Model generieren zu können
// z.B.:

/* 
public static class TourExtension
{
    public static TourDto ToDto(this Tour)
    {
        return new TourDto(
            tourId,
            name,
            description,
            ...
            );
    }
}
*/// namespace Tourplanner;
//
// using Microsoft.EntityFrameworkCore;
// using Tourplanner.Entities.Tour;
// using Tourplanner.Entities.TourLog;
//
// public class TourDbContext : DbContext {
// public TourDbContext() {}
//     
// }
using System.Runtime.Serialization;

namespace Tourplanner.Models;

public enum TransportType 
{
    // [EnumMember(Value = "Bicycle")]
    Bicycle,
    // [EnumMember(Value = "Car")]
    Car,
    // [EnumMember(Value = "Walking")]
    Walking,
    // [EnumMember(Value = "Hiking")]
    Hiking,
    // [EnumMember(Value = "Crawling")]
    Crawling,
    // [EnumMember(Value = "Wheelchair")]
    Wheelchair,
}// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+985fc77dc955550a4be9a5e209c1c0e4f733d156")]
[assembly: System.Reflection.AssemblyProductAttribute("Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.

using Tourplanner.Entities;
using Tourplanner.Entities.TourLogs.Commands;
using Tourplanner.Services;
using Tourplanner.Services.Search;

namespace Tourplanner;

using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using Tourplanner.Repositories;
using Tourplanner.Infrastructure;
using Entities.Tours;
using Entities.TourLogs;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

internal class Program
{
    public static void Main(string[] args)
    {
        var builder = WebApplication.CreateBuilder(args);

        builder.Services.AddControllers();

        builder.Services.AddDbContext<TourContext>(options =>
            options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

        builder.Services.AddCors(options =>
        {
            options.AddPolicy("AllowAll", policy =>
            {
                policy.WithOrigins("*")
                    .AllowAnyHeader()
                    .AllowAnyMethod();
            });
        });

        // Register other services
        RegisterServices(builder.Services);

        var app = builder.Build();

        // Configure the HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseHttpsRedirection();
        app.UseRouting();
        app.UseCors("AllowAll");
        app.UseAuthorization();

        app.MapControllers();

        // Ensure database is created
        CreateDbIfNotExists(app);

        app.Run();
    }

    private static void RegisterServices(IServiceCollection services)
    {
        services.AddTransient<DbContext, TourContext>();
        services.AddTransient<IServiceProvider, ServiceProvider>();
        services.AddTransient<IMediator, Mediator>();
        services.AddScoped<ISearchService, StringSearchService>();
        services.AddTransient<IRatingService, RatingService>();
        services.AddTransient<IChildFriendlinessService, ChildFriendlinessService>();
        services.AddScoped<ITourLogRepository, TourLogRepository>();
        services.AddScoped<ITourRepository, TourRepository>();

        services.AddScoped<ICommandHandler, GetToursCommandHandler>();
        services.AddScoped<ICommandHandler, GetTourByIdCommandHandler>();
        services.AddScoped<ICommandHandler, CreateTourCommandHandler>();
        services.AddScoped<ICommandHandler, UpdateTourCommandHandler>();
        services.AddScoped<ICommandHandler, DeleteTourCommandHandler>();
        services.AddScoped<ICommandHandler, GetTourLogsRequestHandler>();
        services.AddScoped<ICommandHandler, GetSingleTourLogRequestHandler>();
        services.AddScoped<ICommandHandler, CreateTourLogCommandHandler>();
        services.AddScoped<ICommandHandler, UpdateTourLogCommandHandler>();
        services.AddScoped<ICommandHandler, DeleteTourLogCommandHandler>();
        services.AddScoped<ICommandHandler, GetSearchResultsQueryHandler>();
    }

    private static void CreateDbIfNotExists(WebApplication app)
    {
        using (var scope = app.Services.CreateScope())
        {
            var services = scope.ServiceProvider;
            try
            {
                var context = services.GetRequiredService<TourContext>();
                context.Database.EnsureCreated(); // or your custom DbInitializer
            }
            catch (Exception ex)
            {
                var logger = services.GetRequiredService<ILogger<Program>>();
                logger.LogError(ex, "An error occurred while creating the database.");
            }
        }
    }
}﻿namespace Tourplanner.Repositories;

public interface IRepository<T>
{
    public Task<T?> Get(int id);
    public Task<IEnumerable<T>?> GetAll();
    public Task Delete(T obj);
    public Task Create(T obj);
    public Task SaveAsync();
    public Task UpdateAsync(T obj);
}﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Tourplanner.Models;

namespace Tourplanner.Repositories;

public abstract class Repository<TEntity> : IRepository<TEntity>, IDisposable
where TEntity : class
{
    protected TourContext context;
    private bool disposed = false;
    protected DbSet<TEntity> dbSet;

    public Repository(TourContext tourContext)
    {
        context = tourContext;
        dbSet = context.Set<TEntity>();
    }

    public virtual async Task<TEntity?> Get(int id)
    {
        return await dbSet.FindAsync(id);
    }

    public virtual async Task<IEnumerable<TEntity>?> GetAll()
    {
        return await dbSet.ToListAsync();
    }

    public virtual async Task Create(TEntity entity)
    {
        await dbSet.AddAsync(entity);
        await SaveAsync();
    }

    public virtual async Task Delete(TEntity entity)
    {
        dbSet.Remove(entity);
        await SaveAsync();
    }
    
    public async Task SaveAsync()
    {
        await context.SaveChangesAsync();
    }

    public virtual async Task DeleteById(int id)
    {
        var entity = dbSet.Find(id);
        dbSet.Remove(entity);
        await SaveAsync();
    }

    public virtual async Task UpdateAsync(TEntity entity)
    {
        dbSet.Update(entity);
        await SaveAsync();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            if (disposing)
            {
                context.Dispose();
            }
        }

        this.disposed = true;
    }
}﻿using Tourplanner.Entities.TourLogs;

namespace Tourplanner.Repositories;

public class TourLogRepository : Repository<TourLog>, ITourLogRepository
{
    public TourLogRepository(TourContext tourContext) : base(tourContext)
    {
    }

    public async Task<IEnumerable<TourLog>> GetTourLogsForTour(int tourId)
    {
        return dbSet.Where(log => log.TourId == tourId).ToList();
        
        var logs = await GetAll();
        return logs;
    }


}

public interface ITourLogRepository : IRepository<TourLog>
{
    Task<IEnumerable<TourLog>> GetTourLogsForTour(int tourid);
}﻿using Microsoft.EntityFrameworkCore;
using Tourplanner.Entities.Tours;

namespace Tourplanner.Repositories;

public class TourRepository : Repository<Tour>, ITourRepository
{
    public TourRepository(TourContext tourContext) : base(tourContext)
    {
    }

    public async Task<int> CreateReturnId(Tour tour)
    {
        await dbSet.AddAsync(tour);
        await SaveAsync();
        return tour.Id;
    }

    public async Task<Tour?> GetTourWithLogs(int tourId)
    {
        // return await Get(tourId);
        return await dbSet.Include(t => t.TourLogs)
            .FirstOrDefaultAsync(to => to.Id == tourId);
    }
}

public interface ITourRepository : IRepository<Tour>
{
    public Task<int> CreateReturnId(Tour tour);
    public Task<Tour?> GetTourWithLogs(int tourId);
}﻿using Tourplanner.Entities.Tours;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Exceptions;
using Tourplanner.Repositories;
using Tourplanner.Entities;

namespace Tourplanner.Services
{
    public interface IChildFriendlinessService
    {
        public float GetAverageDifficulty(IEnumerable<TourLog> logs);
        public float GetMaxTourDistance(IEnumerable<Tour> tours);
        public Task<float> Calculate(int tourId);

    }
    public class ChildFriendlinessService : IChildFriendlinessService
    {
        private ITourRepository _tourRepository;
        private ITourLogRepository tourLogRepository;

        public ChildFriendlinessService(ITourRepository tourRepository, ITourLogRepository tourLogRepository)
        {
            _tourRepository = tourRepository;
            this.tourLogRepository = tourLogRepository;
        }

        public float GetAverageDifficulty(IEnumerable<TourLog> logs)
        {
            return logs.Any()
                ? logs.Sum(log => log.Difficulty) / logs.Count()
                : 0.0f;
        }

        public float GetMaxTourDistance(IEnumerable<Tour> tours)
        {
            return tours.Max(tour => tour.Distance);
        }

        public async Task<float> Calculate(int tourId)
        {
            var tours = await _tourRepository.GetAll();
            var tour = tours?.SingleOrDefault(t => t.Id == tourId) ?? null;

            if (tours is null || !tours.Any() || tour is null)
            {
                throw new ResourceNotFoundException("Tour not found");
            }

            var maxDistance = tours.Max(tour => tour.Distance);
            var logs = tour.TourLogs;
            var avgDifficulty = GetAverageDifficulty(logs);
            var durationInHours = tour.EstimatedTime / 60;
            var normalizedDistance = MathUtils.MapRange(tour.Distance, 0.0f, maxDistance, 0f, 10.0f);
            var normalizedDuration = MathUtils.MapRange(durationInHours, 0f, 60.0f, 0f, 10f);
            var sum = tour.Distance + tour.EstimatedTime + avgDifficulty;
            var normalizedSum = MathUtils.MapRange(sum, 0f, 30.0f, 0.0f, 10.0f);

            return normalizedSum;
        }
    }
}﻿namespace Tourplanner.Services.Search
{

    public class FuzzyMatcher
    {
        private int stringLengthWeight;
        private int sensitivity;
        private int costInsertion { get; set; }
        private int costSubstitution { get; set; }
        private int costDeletion { get; set; }
        private int minStringLengthToApplyWeight { get; set; }

        public FuzzyMatcher()
        {
            this.costInsertion = 1;
            this.costSubstitution = 1;
            this.costDeletion = 1;
            this.stringLengthWeight = 1;
            this.minStringLengthToApplyWeight = 6;
            this.sensitivity = 1;
        }

        private int[,] InitMatrix(int lengthStr1, int lengthStr2)
        {
            int[,] arr = new int[lengthStr1 + 1, lengthStr2 + 1];

            for (int i = 0; i <= lengthStr1; i++)
            {
                arr[i, 0] = i;
            }

            for (int j = 0; j <= lengthStr2; j++)
            {
                arr[0, j] = j;
            }

            return arr;
        }

        public int GetEditDistance(string string1, string string2)
        {
            int lengthStr1 = string1.Length;
            int lengthStr2 = string2.Length;

            if (lengthStr1 == 0)
            {
                return lengthStr2;
            }

            if (lengthStr2 == 0)
            {
                return lengthStr1;
            }

            int[,] arr = InitMatrix(lengthStr1, lengthStr2);

            for (int i = 1; i <= lengthStr1; i++)
            {
                for (int j = 1; j <= lengthStr2; j++)
                {
                    if (string1[i - 1] == string2[j - 1])
                    {
                        arr[i, j] = arr[i - 1, j - 1];
                    }
                    else
                    {
                        arr[i, j] = Math.Min(
                            arr[i - 1, j - 1],
                            Math.Min(arr[i, j - 1], arr[i - 1, j])
                        ) + 1;
                    }
                }
            }

            int distance = arr[lengthStr1, lengthStr2];

            return distance;
        }
    }
}﻿namespace Tourplanner.Services.Search
{
    public interface ISearchService
    {
        public List<WordDistanceMap> GetMatches(string provided, List<string> searchables);
        public List<WordDistanceMap> GetMatches(string userInput);
        public void SetSearchableWords(List<string> wordlist);
        
        public ISearchService SetThreshold(int _threshold);
    }
}﻿namespace Tourplanner.Services;

public static class MathUtils
{
    public static float MapRange(float value, float inMin, float inMax, float outMin, float outMax)
    {
        value = Math.Max(inMin, Math.Min(inMax, value));
        float normalizedValue = (value - inMin) / (inMax - inMin);
    
        return outMin + normalizedValue * (outMax - outMin);
    }
}﻿using Tourplanner.Entities.TourLogs;
using Tourplanner.Repositories;

namespace Tourplanner.Services
{
    public interface IRatingService
    {
        public float Calculate(IEnumerable<TourLog> tourLogs);
    }
    public class RatingService : IRatingService
    {

        public RatingService()
        {
        }

        public float Calculate(IEnumerable<TourLog> tourLogs)
        {
            if (tourLogs == null || !tourLogs.Any())
            {
                return 0.0f;
            }

            float totalRating = tourLogs.Sum(t => t.Rating);
            float averageRating = totalRating / tourLogs.Count();

            return averageRating;
        }
    }
}﻿namespace Tourplanner.Services.Search
{
    public class StringSearchService : ISearchService
    {
        private Trie prefixTree;
        private List<string> searchableWords;
        private bool completedSetup;
        private FuzzyMatcher fuzzyMatcher;
        private int threshold;

        public StringSearchService()
        {
            fuzzyMatcher = new FuzzyMatcher();
            prefixTree = new Trie(true);
            searchableWords = new List<string>();
            completedSetup = false;
            threshold = Int32.MaxValue;
        }

        public void SetSearchableWords(List<string> words)
        {
            searchableWords = words.Select(word => word.ToLower()).ToList();
            prefixTree.Init(words);
            completedSetup = true;
        }

        public void UpdatePrefixTree(List<string> searchables)
        {
            foreach (var word in searchables)
            {
                prefixTree.Insert(word);
            }
        }

        private int CbSortByDistanceAsc(WordDistanceMap currentWord, WordDistanceMap nextWord)
        {
            return currentWord.Distance <= nextWord.Distance ? -1 : 1;
        }

        private int CbSortByPrefixAsc(WordDistanceMap currentWord, WordDistanceMap nextWord)
        {
            if (currentWord.IsPrefix && !nextWord.IsPrefix)
                return -1;
            if (!currentWord.IsPrefix && nextWord.IsPrefix)
                return 1;
            if (!currentWord.IsPrefix && !nextWord.IsPrefix)
                return 0;
            if (currentWord.IsPrefix && currentWord.Distance <= nextWord.Distance)
                return -1;
            return 1;
        }

        private List<WordDistanceMap> SortSuggestions(List<WordDistanceMap> distanceMappings)
        {
            var sorted = distanceMappings.OrderBy(word => word.Distance).ToList();
            sorted.Sort(CbSortByPrefixAsc);
            return sorted;
        }

        /// <summary>
        /// Boundary for Levenstein distance where matches get dropped if their distance exceeds the threshold.
        /// Higher threshold => more forgiving => more search results
        /// Lower threshold => less forgiving => fewer search results 
        /// </summary>
        /// <param name="_threshold"></param>
        /// <returns>Instance itself (for method chaining)</returns>
        public ISearchService SetThreshold(int _threshold)
        {
            threshold = _threshold;
            return this;
        }
        
        /// <summary>
        /// Gets possible matches for a provided search term.
        /// Use this implementation if you don't plan to reuse the wordlist.
        /// </summary>
        /// <param name="userInput">Search term.</param>
        /// <param name="searchables">List of searchable words.</param>
        /// <returns></returns>
        public List<WordDistanceMap> GetMatches(string userInput, List<string> searchables)
        {
            SetSearchableWords(searchables);
            searchables = searchables.Select(word => word.ToLower()).ToList();
            var stringDistanceMappings = CreateDistanceMappingsForWordList(searchables, userInput);
            stringDistanceMappings = SortSuggestions(stringDistanceMappings);
            var matches = stringDistanceMappings
                .Where(mapping => mapping.Distance <= threshold).ToList();
            
            Reset();

            return matches;
        }
        
        /// <summary>
        /// Gets possible matches for a provided search term.
        /// Use this implementation if you already defined a list of searchable words using
        /// the method SetSearchableWords.
        /// </summary>
        /// <param name="userInput">Search term.</param>
        /// <returns>List of possible matches.</returns>
        /// <exception cref="Exception">Throws exception if setup is incomplete (e.g. no list of searchable
        /// words provided.</exception>
        public List<WordDistanceMap> GetMatches(string userInput)
        {
            if (!completedSetup)
                throw new Exception("Setup incomplete!");
            
            var matches = searchableWords.Select(word => word.ToLower()).ToList();
            var stringDistanceMappings = CreateDistanceMappingsForWordList(matches, userInput);
            stringDistanceMappings = SortSuggestions(stringDistanceMappings);

            return stringDistanceMappings.Where(mapping => mapping.Distance <= threshold).ToList();
        }

        private string LimitWordLength(string word, int length)
        {
            return word.Substring(0, Math.Min(length, word.Length));
        }

        private int GetShorterDistance(string userInput, string word)
        {
            int userInputLength = userInput.Length;
            string trimmedWord = word.Substring(0, Math.Min(userInputLength, word.Length));
            int trimmedWordDistance = fuzzyMatcher.GetEditDistance(userInput, trimmedWord);
            int untrimmedWordDistance = fuzzyMatcher.GetEditDistance(userInput, word);

            return Math.Min(trimmedWordDistance, untrimmedWordDistance);
        }

        private List<WordDistanceMap> CreateDistanceMappingsForWordList(List<string> searchables, string userInput)
        {
            bool existsAsPrefix = prefixTree.PrefixExists(userInput);

            return searchables.Select(word =>
            {
                bool isPrefix = existsAsPrefix && word.StartsWith(userInput);
                int distance = GetShorterDistance(userInput, word);
                return new WordDistanceMap(word, distance, isPrefix);
            }).ToList();
        }

        private void Reset()
        {
            completedSetup = false;
            searchableWords = new List<string>();
            prefixTree = new Trie(true);
            threshold = Int32.MaxValue;
        }
    }
}﻿namespace Tourplanner.Services.Search
{
    public class Trie
    {
        private TrieNode root;
        private bool ignoreCase;

        public Trie(bool caseInsensitive)
        {
            root = new TrieNode();
            ignoreCase = caseInsensitive;
        }

        public void Init(List<string> wordList)
        {
            foreach (var word in wordList)
            {
                Insert(word);
            }
        }

        private int CharToIndex(char character)
        {
            return ignoreCase
                ? char.ToLower(character) - 'a'
                : character - 'a';
        }

        public bool Insert(string word)
        {
            try
            {
                if (WordExists(word))
                    return true;

                TrieNode node = root;

                foreach (var character in word)
                {
                    int index = CharToIndex(character);

                    if (node.Children.ElementAtOrDefault(index) is null)
                    {
                        node.Children[index] = new TrieNode();
                    }

                    node = node.Children.ElementAt(index);
                }

                node.IsTerminal = true;
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                return false;
            }
        }

        public bool WordExists(string word)
        {
            TrieNode node = root;

            foreach (var character in word)
            {
                int index = CharToIndex(character);

                if (node.Children.ElementAtOrDefault(index) is null)
                {
                    return false;
                }

                node = node.Children.ElementAt(index);
            }

            return node.IsTerminal;
        }

        public bool PrefixExists(string prefix)
        {
            TrieNode node = root;

            foreach (var character in prefix)
            {
                int index = CharToIndex(character);

                if (node.Children.ElementAtOrDefault(index) is null)
                {
                    return false;
                }

                node = node.Children.ElementAt(index);
            }

            return true;
        }
    }
}﻿namespace Tourplanner.Services.Search
{
    public class TrieNode
    {
        public TrieNode[] Children { get; set; } = new TrieNode[130];
        public bool IsTerminal { get; set; }

        public TrieNode(bool isTerminal = false)
        {
            IsTerminal = isTerminal;
        }
    } 
}
﻿namespace Tourplanner.Services.Search
{
    public class WordDistanceMap
    {
        public string Content { get; set; }
        public int Distance { get; set; }
        public bool IsPrefix { get; set; }

        public WordDistanceMap(string content, int distance, bool isPrefix)
        {
            Content = content;
            Distance = distance;
            IsPrefix = isPrefix;
        }
    };
}using System.Reflection;
using System.Text.Json.Serialization;
using Microsoft.EntityFrameworkCore;
using Tourplanner.DTOs;
using Tourplanner.Entities;
using Tourplanner.Entities.Tours;
using Tourplanner.Entities.TourLogs;
using Tourplanner.Entities.TourLogs.Commands;
using Tourplanner.Infrastructure;
using Tourplanner.Repositories;

namespace Tourplanner;

// https://www.tutorialsteacher.com/core/aspnet-core-startup

public class Startup
{
    public IConfiguration Configuration { get; set; }

    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }


    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<TourContext>(options =>
        {
            options.UseNpgsql(Configuration.GetConnectionString("DefaultConnection"));
        });
        services.AddControllers().AddJsonOptions(x =>{
            x.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());});

        services.AddTransient<DbContext, TourContext>();
        services.AddTransient<IServiceProvider, ServiceProvider>();
        services.AddTransient<IMediator, Mediator>();
        services.AddScoped<ITourLogRepository, TourLogRepository>();
        services.AddScoped<ITourRepository, TourRepository>();
        
        AddCommandHandlers(services);
        
        // services.AddTransient<ICommandHandler, GetToursCommandHandler>();
    }

    protected void AddCommandHandlers(IServiceCollection services)
    {
        services.AddScoped<ICommandHandler, GetToursCommandHandler>();
        services.AddScoped<ICommandHandler, GetTourByIdCommandHandler>();
        services.AddScoped<ICommandHandler, CreateTourCommandHandler>();
        services.AddScoped<ICommandHandler, UpdateTourCommandHandler>();
        services.AddScoped<ICommandHandler, DeleteTourCommandHandler>();
        services.AddScoped<ICommandHandler, GetTourLogsRequestHandler>();
        services.AddScoped<ICommandHandler, GetSingleTourLogRequestHandler>();
        services.AddScoped<ICommandHandler, CreateTourLogCommandHandler>();
        services.AddScoped<ICommandHandler, UpdateTourLogCommandHandler>();
        services.AddScoped<ICommandHandler, DeleteTourLogCommandHandler>();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseHttpsRedirection();
        app.UseRouting();
        app.UseCors("AllowAll");
        app.UseAuthorization();
        app.UseEndpoints(endpoints => { endpoints.MapControllers(); });
    }
}﻿<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>﻿@using System.Resources
@using Client.Utils


<button @onclick="OnClickCallback" class="@_btnClass @GetMarginStyles()" disabled="@IsDisabled">

    @if (HasIcon())
    {
        <div class="tp-button-icon-wrapper">
            <div class="icon-wrapper">
                <img src="@IconPath" alt="@AltText"/>
            </div>
        </div>
    }

    <div class="tp-button-label">@Label</div>
</button>


@code {
    private string _btnClass;
    private String? _IconPath = String.Empty;
    private string _backgroundColor = "";

    [Parameter] public bool IsDisabled { get; set; } = false;

    [Parameter] public String ButtonType { get; set; } = "Primary";

    [Parameter] public EventCallback OnClickCallback { get; set; }

    [Parameter] public String mt { get; set; } = "0px";

    [Parameter] public String mb { get; set; } = "0px";

    [Parameter] public String ml { get; set; } = "0px";

    [Parameter] public String mr { get; set; } = "0px";

    private string GetMarginStyles()
    {
        return $"{(mt != null ? "mt-" + mt : "")} {(mb != null ? "mb-" + mb : "")} {(ml != null ? "ml-" + ml : "")} {(mr != null ? "mr-" + mr : "")}";
        
    }

    protected override void OnParametersSet()
    {
        SetCssClass();
    }
    
    private bool HasIcon() => !String.IsNullOrEmpty(Icon);

    private void SetCssClass()
    {
        _btnClass = HasIcon() ? "tp-button icon" : "tp-button";
        _btnClass += $" {ButtonType}";
    }

    [Parameter] public String? AltText { get; set; } = "undefined";

    [Parameter] public String Label { get; set; } = "Label";

    private String? IconPath
    {
        get
        {
            if (!String.IsNullOrEmpty(Icon))
            {
                return StaticResService.GetIconPath(Icon);
            }

            return String.Empty;
        }
        set => _IconPath = value;
    }

    [Parameter] public String? Icon { private get; set; }
}﻿namespace Client.Components;

public enum ButtonType
{
    Primary,
    Secondary
}﻿@using Client.Components

<!-- <div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Client</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div> -->

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <NavMenuItem Href="tours" Icon="route" Title="Tours"/>
        <NavMenuItem Href="logs" Icon="log" Title="Logs"/>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;


    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    private void ToggleNavMenu()


    {
        collapseNavMenu = !collapseNavMenu;
    }

}@using System.Resources
@using Client.Utils

<div class="nav-item px-3">
    <div class="nav-item-wrapper">
        <div class="nav-item-img-wrapper">
            <img src="@IconPath" alt="Map"/>
        </div>
        <NavLink class="nav-link" href="@Href" Match="NavLinkMatch.All">
            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
            @Title
        </NavLink>
    </div>
</div>

@code {
    [Parameter]
    public String? Href
    {
        get;
        set;
    } = "";

    [Parameter]
    public string? Title
    {
        get;
        set;
    }

    [Parameter]
    public string? Icon
    {
        get;
        set;
    }

    private String IconPath
    {
        get => StaticResService.GetIconPath(Icon);
    }
}namespace Client.Dao
{
    
    public interface IDao<TDto>
    {
        Task Create(TDto dto);
        Task<TDto> Read(TDto tourLog);
        Task<IEnumerable<TDto>> ReadMultiple();
        Task Update(TDto dto);
        Task Delete(TDto dto);
        void SeTDto(TDto dto);
    }

    public abstract class Dao<TDto> : IDao<TDto> where TDto : class
    {
        protected TDto? model;

        public abstract Task Create(TDto dto);
        public abstract Task<TDto> Read(TDto tourLog);
        public abstract Task<IEnumerable<TDto>> ReadMultiple();
        public abstract Task Update(TDto dto);
        public abstract Task Delete(TDto dto);
        public virtual void SeTDto(TDto dto)
        {
            this.model = model;
        }
    }
}namespace Client.Dao;

public abstract class HttpDao<TDto> : Dao<TDto> where TDto : class
{
    protected IHttpService http;
    protected TDto? model;
    public HttpDao(IHttpService http)
    {
        this.http = http;
    }

    public override abstract Task Create(TDto dto);
    public override abstract Task<TDto> Read(TDto tourLog);
    public override abstract Task<IEnumerable<TDto>> ReadMultiple();
    public override abstract Task Update(TDto dto);
    public override abstract Task Delete(TDto dto);
    public override void SeTDto(TDto model)
    {
        this.model = model;
    }
}using Client.Models;

namespace Client.Dao
{
    public interface ITourDao : IDao<Tour>
    {
    }

    public class TourDao : HttpDao<Tour>, ITourDao
    {
        public TourDao(IHttpService http) : base(http)
        {
        }

        public override async Task Create(Tour tour)
        {
            var createTourDto = new CreateTourDto(
                name: tour.Name,
                description: tour.Description,
                from: tour.From,
                to: tour.To,
                distance: tour.Distance,
                estimatedTime: tour.EstimatedTime,
                transportType: tour.TransportType
            );
            
            await http.Post<CreateTourDto>(createTourDto, $"Tours");
        }

        public override async Task<Tour> Read(Tour tourLog)
        {
            return await http.Get<Tour>($"Tours/{tourLog.Id}");
        }

        public override async Task<IEnumerable<Tour>> ReadMultiple()
        {
            return await http.Get<IEnumerable<Tour>>("Tours");
        }

        public override async Task Update(Tour tour)
        {
            var updateTourDto = new UpdateTourDto(
                tour.Name,
                tour.Description,
                tour.From,
                tour.To,
                tour.TransportType
            );
            await http.Put<UpdateTourDto>(updateTourDto, $"Tours/{tour.Id}");
        }

        public override async Task Delete(Tour tour)
        {
            await http.Delete($"Tours/{tour.Id}");
        }
    }
}using Client.Models;
using Client.Dto;

namespace Client.Dao
{
    public interface ITourLogDao : IDao<TourLog>
    {
        public Task<IEnumerable<TourLog>> ReadMultiple(int tourid);
    };

    public class TourLogDao : HttpDao<TourLog>, ITourLogDao
    {

        public TourLogDao(IHttpService http) : base(http) { }
        public override async Task Create(TourLog tourLog)
        {
            var createTourLogDto = new CreateTourLogDto(
                tourLog.DateTime,
                tourLog.Comment,
                tourLog.Difficulty,
                tourLog.Duration,
                tourLog.Rating
                );
                
            await http.Post<CreateTourLogDto>(createTourLogDto, $"Tours/{tourLog.Tour.Id}/logs");
        }
        public override async Task<TourLog> Read(TourLog tourLog)
        {
            return await http.Get<TourLog>($"Tours/logs/{tourLog.Id}");
        }

        public async Task<IEnumerable<TourLog>> ReadMultiple(int tourid)
        {
            return await http.Get<IEnumerable<TourLog>>($"Tours/{tourid}/logs");
        }
        public override Task<IEnumerable<TourLog>> ReadMultiple()
        {
            throw new NotImplementedException();
        }

        public override async Task<HttpResponseMessage> Update(TourLog model)
        {

            UpdateTourLogDto updateTourLogDto = new UpdateTourLogDto(
                 model!.Id,
                 model!.Comment,
                 model!.Difficulty,
                 model!.DateTime,
                 model!.Rating
            );

            return await http.Put<UpdateTourLogDto>(updateTourLogDto, $"Tours/logs/{updateTourLogDto!.Id}"); 
        }

        public override async Task Delete(TourLog tourLog)
        {
            await http.Delete($"Tours/logs/{tourLog!.Id}");
        }
    }
}﻿using Client.Models;

    public class CreateTourDto
    {
        public CreateTourDto(
            string name,
            string description,
            string from,
            string to,
            float distance,
            float estimatedTime,
            TransportType transportType
        )
        {
            Name = name;
            Description = description;
            From = from;
            To = to;
            Distance = distance;
            EstimatedTime = estimatedTime;
            TransportType = transportType;
        }

        public string Name { get; set; }
        public string Description { get; set; }
        public string From { get; set; }
        public string To { get; set; }
        public float Distance { get; set; }
        public float EstimatedTime { get; set; }
        public TransportType TransportType {get; set;}
    }
﻿
public class CreateTourLogDto(
    DateTime dateTime,
    string comment,
    float difficulty,
    float duration,
    float rating)
{
    public DateTime DateTime { get; private set; } = dateTime;
    public string Comment { get; private set; } = comment;
    public float Difficulty { get; private set; } = difficulty;
    public float Duration { get; private set; } = duration;
    public float Rating { get; private set; } = rating;
}using Client.Models;

    public class TourDto
    {
        public TourDto(
            int tourId,
            string name,
            string description,
            string from,
            string to,
            TransportType transportType,
            double distance,
            float timespan,
            float popularity,
            double childfriendliness,
            string routeImage
        )
        {
            TourId = tourId;
            Name = name;
            Description = description;
            From = from;
            To = to;
            TransportType = transportType;
            Distance = distance;
            EstimatedTime = timespan;
            Popularity = popularity;
            Childfriendliness = childfriendliness;
            RouteImage = routeImage;
        }
        public int TourId { get; protected set; }
        public string Name { get; protected set; }
        public string Description { get; protected set; }
        public string From { get; protected set; }
        public string To { get; protected set; }
        public TransportType TransportType { get; protected set; }
        public double Distance { get; protected set; }
        public float EstimatedTime { get; protected set; }
        public float Popularity { get; protected set; }
        public double Childfriendliness { get; protected set; }
        public string RouteImage { get; protected set; }
    }

    public class TourLogDto
    {
        public TourLogDto(
            int id,
            int tourId,
            DateTime dateTime,
            string comment,
            float difficulty,
            float duration,
            double rating
        )
        {
            Id = id;
            TourId = tourId;
            DateTime = dateTime;
            Comment = comment;
            Difficulty = difficulty;
            Duration = duration;
            Rating = rating;
        }

        public int Id { get; private set; }
        public int TourId { get; private set; }
        public DateTime DateTime { get; private set; }
        public string Comment { get; private set; }
        public float Difficulty { get; private set; }
        public float Duration { get; private set; }
        public double Rating { get; private set; }
    }
﻿using Client.Models;


public class UpdateTourDto
{
    public UpdateTourDto(
        string name,
        string description,
        string from,
        string to,
        TransportType transportType)
    {
        Name = name;
        Description = description;
        From = from;
        To = to;
    }

    public string Name { get; set; }
    public string Description { get; set; }
    public string From { get; set; }
    public string To { get; set; }
    public TransportType TransportType { get; set; }
}﻿namespace Client.Dto;
public class UpdateTourLogDto(
    int id,
    string comment,
    float difficulty,
    DateTime dateTime,
    float rating
    )
{
    public int Id { get; private set; } = id;
    public string Comment { get; private set; } = comment;
    public float Difficulty { get; private set; } = difficulty;
    public DateTime DateTime { get; private set; } = dateTime;
    public float Rating { get; private set; } = rating;
    // TODO add total time
}﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Images {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Images() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Client.Images", typeof(Images).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://localhost:5161/api/.
        /// </summary>
        internal static string api_base_url {
            get {
                return ResourceManager.GetString("api_base_url", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dumbbell.png.
        /// </summary>
        internal static string difficulty {
            get {
                return ResourceManager.GetString("difficulty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to stopwatch.png.
        /// </summary>
        internal static string duration {
            get {
                return ResourceManager.GetString("duration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to edit.png.
        /// </summary>
        internal static string edit {
            get {
                return ResourceManager.GetString("edit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to location-pin.png.
        /// </summary>
        internal static string from {
            get {
                return ResourceManager.GetString("from", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to clipboard.png.
        /// </summary>
        internal static string log {
            get {
                return ResourceManager.GetString("log", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to map.png.
        /// </summary>
        internal static string map {
            get {
                return ResourceManager.GetString("map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #5E38AA.
        /// </summary>
        internal static string primary {
            get {
                return ResourceManager.GetString("primary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to like.png.
        /// </summary>
        internal static string rating {
            get {
                return ResourceManager.GetString("rating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to route.png.
        /// </summary>
        internal static string route {
            get {
                return ResourceManager.GetString("route", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #ffffff.
        /// </summary>
        internal static string secondary {
            get {
                return ResourceManager.GetString("secondary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to star.png.
        /// </summary>
        internal static string start {
            get {
                return ResourceManager.GetString("start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to location-pin.png.
        /// </summary>
        internal static string to {
            get {
                return ResourceManager.GetString("to", resourceCulture);
            }
        }
    }
}
﻿@inherits LayoutComponentBase
@using Client.Components
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<nav class="navbar navbar-expand-sm navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Tourplanner</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="tours" Match="NavLinkMatch.All">
                        Tours
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="new">
                        Add Tour
                    </NavLink>
                </li>
            </ul>
           <div class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind="SearchValue">
                @* <button class="btn btn-primary" @onclick="() => TriggerSearch()">Search</button> *@
                <button class="btn btn-primary" >Search</button>
            </div>
        </div>
    </div>
</nav>

<div class="page">
    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    private string SearchValue { get; set; }

    private async Task TriggerSearch()
    {

        if(string.IsNullOrWhiteSpace(SearchValue))
            return;

        var encodedSearchValue = Uri.EscapeDataString(SearchValue);
        NavManager.NavigateTo($"/tours/search?search={encodedSearchValue}");
    }

    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
using Client.Dao;

namespace Client.Models
{

    // public abstract class HttpDao<TModel> : IDao<TModel> where TModel : class
    // {
    //     private IHttpService _httpService;
    //     protected TModel _model;

    //     public HttpDao(IHttpService httpService)
    //     {
    //         this._httpService = httpService;
    //     }

    //     public void SetModel(TModel model)
    //     {
    //         this._model = model;
    //     }

    //     public abstract Task Create()
    //     {

    //     }
    //     public abstract Task<TModel> Read();
    //     public abstract Task Update();
    //     public abstract Task Delete();
    // }
    //
    // public interface IModel { }
    //
    // public abstract class Model
    // {
    //     protected IDao<Model>? dao;
    //
    //     public int Id { get; set; }
    //
    //     public Model(IDao<Model> dao)
    //     {
    //         this.dao = dao;
    //         this.dao.SetModel(this);
    //     }
    //
    //     public virtual async Task Create(Model model)
    //     {
    //         await dao!.Create();
    //     }
    //
    //     public virtual async Task Delete()
    //     {
    //         await dao!.Delete();
    //     }
    //
    //     public virtual async Task Update()
    //     {
    //         await dao!.Update();
    //     }
    //
    //     public virtual async Task<Model?> Read()
    //     {
    //         return await dao!.Read(this);
    //     }
    //
    //     public virtual async Task<IEnumerable<Model>?> ReadMultiple()
    //     {
    //         return await dao!.ReadMultiple();
    //     }
    //
    // }

}using Client.Dao;

namespace Client.Models
{
    public enum TransportType
    {
        Car,
        Bicycle,
        Walking,
        PublicTransport
    }

    public class Tour
    {
        public Tour()
        {
        }
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string From { get; set; } = string.Empty;
        public string To { get; set; } = string.Empty;
        public float EstimatedTime { get; set; } = 0;
        public string Description { get; set; } = string.Empty;
        public float Distance { get; set; } = 0;
        public float Popularity { get; set; } = 0;
        public TransportType TransportType { get; set; } = TransportType.Car;
        public float ChildFriendliness { get; set; } = 0;
        public string ImagePath { get; set; } = string.Empty;
        public string TourName {get; set;} = string.Empty;
    }

}using Client.Dao;
using Client.Models;

public class TourLog
{
    public TourLog()
    {
    }
    public int Id { get; set; }
    public DateTime DateTime { get; set; }
    public string Comment { get; set; } = "";
    public float Difficulty { get; set; } = 0;
    public float Duration { get; set; } = 0;
    public float Rating { get; set; } = 0;
    public Tour Tour { get; set; } = new Tour();
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Client")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+985fc77dc955550a4be9a5e209c1c0e4f733d156")]
[assembly: System.Reflection.AssemblyProductAttribute("Client")]
[assembly: System.Reflection.AssemblyTitleAttribute("Client")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
@page "/new"
@attribute [StreamRendering]
@inject TourAddPageViewModel AddTourVM
@using Client.Components
@using Client.Models

<PageTitle>Add Tour</PageTitle>

<h1>Add Tour</h1>


    <div class="form-group mt-3">
        <div class="row">
            @* Tour name *@
            <div class="col">
                <label for="name">Name</label>
                <input type="text" class="form-control" id="name" placeholder="Enter name" @bind="AddTourVM.Tour.Name">
            </div>
            @* Transport Type *@
            <div class="col">
                <label for="transporttype">Transport Type</label>
                <select class="form-control" id="transporttype" @bind="AddTourVM.Tour.TransportType">
                    @foreach (var type in Enum.GetValues<TransportType>())
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="form-group mt-3">
        <div class="row">
            @* From *@
            <div class="col">
                <label for="from">From</label>
                <input type="text" class="form-control" id="from" placeholder="Enter start" @bind="AddTourVM.Tour.From">
            </div>
            @* To *@
            <div class="col">
                <label for="to">To</label>
                <input type="text" class="form-control" id="to" placeholder="Enter destination"
                    @bind="AddTourVM.Tour.To">
            </div>
        </div>
    </div>

    @* Description *@
    <div class="form-group mt-3">
        <label for="description">Description</label>
        <textarea class="form-control" id="description" placeholder="Enter description"
            @bind="AddTourVM.Tour.Description"></textarea>
    </div>

    <Button ButtonType="Primary" mt="4" Label="Add" Icon="map" OnClickCallback="AddTourVM.AddTour"/>
@page "/tour/{TourId}/add-log"
@attribute [StreamRendering]
@inject TourLogAddPageViewModel AddLogVM
@inject NavigationManager NavManager
@using Client.Components

<PageTitle>Add Tour Log</PageTitle>

<h1>Add New Log</h1>

@if (AddLogVM.TourLog == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5>Tour: @AddLogVM.TourLog.Tour.Name</h5>

        <div class="row">
            <div class="col mt-3">
                <label for="date">Date</label>
                <input type="datetime-local" class="form-control" id="date" @bind="AddLogVM.TourLog.DateTime">
            </div>
            <div class="col mt-3">
                <label for="difficulty">Difficulty</label>
                <input type="number" max="10" class="form-control" id="difficulty" @bind="AddLogVM.TourLog.Difficulty">
            </div>
            <div class="col mt-3">
                <label for="rating">Rating</label>
                <input type="number" max="10" class="form-control" id="rating" @bind="AddLogVM.TourLog.Rating">
            </div>
        </div>

        <div class="row">
            <div class="form-group mt-3">
                <label for="comment">Comment</label>
                <textarea class="form-control" id="comment" rows="3" @bind="AddLogVM.TourLog.Comment"></textarea>
            </div>
        </div>

    <Button ButtonType="Primary" mt="4" Label="Add" Icon="map" OnClickCallback="AddLogVM.AddLog"/>
}

@code {
    [Parameter]
    public string TourId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await AddLogVM.InitializeAsync(int.Parse(TourId));
        StateHasChanged();
    }
}@page "/edit/{TourId}"
@attribute [StreamRendering]
@inject TourEditPageViewModel EditTourVM
@using Client.Models
@using Client.Components

<PageTitle>Edit Tour</PageTitle>

<h1>Edit Tour</h1>
@if (EditTourVM.Tour == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <div class="row">
            <div class="col">
                <label for="name">Name</label>
                <input type="text" class="form-control" id="name" placeholder="Enter name" @bind="EditTourVM.Tour.Name">
            </div>
            <div class="col">
                <label for="transporttype">Transport Type</label>
                <select class="form-control" id="transporttype" @bind="EditTourVM.Tour.TransportType">
                    @foreach (var type in Enum.GetValues<TransportType>())
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
        </div>

    <div class="form-group mt-3">
        <div class="row">
            <div class="col">
                <label for="from">From</label>
                <input type="text" class="form-control" id="from" placeholder="Enter start" @bind="EditTourVM.Tour.From">
            </div>
            <div class="col">
                <label for="to">To</label>
                <input type="text" class="form-control" id="to" placeholder="Enter destination" @bind="EditTourVM.Tour.To">
            </div>
        </div>
    </div>

    <div class="form-group mt-3">
        <label for="description">Description</label>
        <textarea class="form-control" id="description" placeholder="Enter description" @bind="EditTourVM.Tour.Description"></textarea>
    </div>

    <Button ButtonType="Primary" Label="Update" mt="4" OnClickCallback="EditTourVM.UpdateTour"/> 

}

@code {
    [Parameter]
    public string TourId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await EditTourVM.InitializeAsync(Convert.ToInt32(TourId));
        StateHasChanged();
    }
}
﻿@page "/2"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.@page "/logs"
@attribute [StreamRendering]

<PageTitle>Logs</PageTitle>

<h1>Logs</h1>

<p>Here are all available Logs:</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
@page "/tours/{TourId}"

@inject NavigationManager NavManager
@inject TourDetailsPageViewModel TourVM
@using Client.Components

<PageTitle>@TourVM.Tour.Name</PageTitle>

@if (TourVM.Tour == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="tour-header">
        <div class="d-flex justify-content-between align-items-center">
            <h1>@TourVM.Tour.Name</h1>
        <div>
            <Button ButtonType="Danger" Label="Delete" OnClickCallback="DeleteTour"/>
            <Button ButtonType="Primary" Label="Edit" OnClickCallback="EditTour"/>
        </div>
    </div>
        <hr>
        @* Description *@
        <p>@TourVM.Tour.Description</p>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th></th>
                <th>Info</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                @* Estimated time *@
                <td><i class="icon-clock"></i></td>
                <td>Estimated time</td>
                <td>@FormatEstimatedTime(TourVM.Tour.EstimatedTime) h</td>
            </tr>
            <tr>
                @* From *@
                <td><i class="icon-location"></i></td>
                <td>From</td>
                <td>@TourVM.Tour.From</td>
            </tr>
            <tr>
                @* To *@
                <td><i class="icon-destination"></i></td>
                <td>To</td>
                <td>@TourVM.Tour.To</td>
            </tr>
            <tr>
                @* Transport Type *@
                <td><i class="icon-transport"></i></td>
                <td>Transport type</td>
                <td>@TourVM.Tour.TransportType</td>
            </tr>
            <tr>
                @* ChildFriendliness *@
                <td><i class="icon-child"></i></td>
                <td>Child Friendliness</td>
                <td>
                    <div class="progress" style="position: relative;">
                        <div class="progress-bar" role="progressbar" style="width: @(Math.Ceiling(TourVM.Tour.ChildFriendliness) * 10)%"
                            aria-valuenow="@Math.Ceiling(TourVM.Tour.ChildFriendliness)" aria-valuemin="0" aria-valuemax="10">
                        </div>
                        <div class="progress-text" style="color: @(TourVM.Tour.ChildFriendliness < 5 ? "black" : "white; text-shadow:0px 0px 3px black"); position: absolute; top: 0; left: 0; width: 100%; text-align: center;">@Math.Ceiling(TourVM.Tour.ChildFriendliness) / 10</div>
                        </div>
                </td>
            </tr>
            <tr>
                @* Popularity *@
                <td><i class="icon-heart"></i></td>
                <td>Popularity</td>
                <td>
                    <div class="progress" style="position: relative;">
                        <div class="progress-bar" role="progressbar" style="width: @(Math.Ceiling(TourVM.Tour.Popularity) * 10)%"
                            aria-valuenow="@Math.Ceiling(TourVM.Tour.Popularity)" aria-valuemin="0" aria-valuemax="10">
                        </div>
                        <div class="progress-text" style="color: @(TourVM.Tour.ChildFriendliness < 5 ? "black" : "white; text-shadow:0px 0px 3px black"); position: absolute; top: 0; left: 0; width: 100%; text-align: center;">@Math.Ceiling(TourVM.Tour.Popularity) / 10</div>
                    </div>
                </td>
            </tr>


        </tbody>
    </table>

    @* Image *@
    <div class="tour-map">
        <img src="map.png" alt="Map">
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <h2>Logs</h2>
        <button class="btn btn-primary" @onclick="AddLog">+ Add Log</button>
    </div>
    @if (TourVM.TourLogs.Count == 0)
    {
        <p>No logs available.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Comment</th>
                    <th>Difficulty</th>
                    <th>Duration (hrs)</th>
                    <th>Rating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in TourVM.TourLogs)
                {
                    <tr>
                        <td><a href="/tours/@TourId/log/@log.Id">
                            @log.DateTime.ToString("yyyy-MM-dd")
                        </a></td>
                        <td>@log.Comment</td>
                        <td>@log.Difficulty</td>
                        <td>@log.Duration</td>
                        <td>@log.Rating</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public string? TourId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(TourId);
        await TourVM.InitializeAsync(Convert.ToInt32(TourId));
            StateHasChanged();
    }
    private void EditTour()
    {
       NavManager.NavigateTo($"/edit/{TourId}");
    }
    private void AddLog()
    {
        NavManager.NavigateTo($"/tour/{TourId}/add-log");
    }

    private async void DeleteTour()
    {
        await TourVM.DeleteTour();
        NavManager.NavigateTo("/tours");
    }

    private string FormatEstimatedTime(double minutes) // TODO ins ViewModel geben
    {
        double hours = minutes / 60;
        if (hours % 1 == 0) {
            return $"{hours:0}";
        } else if ((hours * 10) % 10 == 5) {
            return $"{hours:0.0}";
        } else {
            return $"{hours:0.00}";
        }
    }
}@page "/tours/{TourId}/log/{TourLogId}"
@attribute [StreamRendering]
@inject TourLogPageViewModel EditLogVM
@inject NavigationManager NavManager
@using Client.Components

<PageTitle>Edit Tour Log</PageTitle>


@if (EditLogVM.TourLog == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex justify-content-between align-items-center">
    <h1>Edit Tour Log</h1>
        <div>
            <button class="btn btn-danger" @onclick="() => EditLogVM.DeleteLog()">
                Delete
            </button>
        </div>
    </div>
    <h5>Tour: @EditLogVM.TourLog.Tour.Name</h5>
        <div class="row">
            <div class="col-md-4">
                <label for="date">Date</label>
                <input type="datetime-local" class="form-control" id="date" @bind="EditLogVM.TourLog.DateTime">
            </div>
            <div class="col-md-4">
                <label for="difficulty">Difficulty</label>
                <input type="number" max="10" class="form-control" id="difficulty" @bind="EditLogVM.TourLog.Difficulty">
            </div>
            <div class="col-md-4">
                <label for="rating">Rating</label>
                <input type="number" max="10" class="form-control" id="rating" @bind="EditLogVM.TourLog.Rating">
            </div>
        </div>

        <div class="form-group mt-3">
            <label for="comment">Comment</label>
            <textarea class="form-control" id="comment" rows="3" @bind="EditLogVM.TourLog.Comment"></textarea>
        </div>

    <Button ButtonType="Primary" Label="Update" Icon="map" OnClickCallback="EditLogVM.UpdateLog"/>

}

@code {
    [Parameter]
    public string TourLogId { get; set; }

    [Parameter]
    public string TourId {get; set;}

    protected override async Task OnInitializedAsync()
    {
        await EditLogVM.InitializeAsync(Convert.ToInt32(TourId), Convert.ToInt32(TourLogId));
        Console.WriteLine(EditLogVM.TourLog.Id);
        StateHasChanged();
    }
}
@page "/"
@page "/tours"
@attribute [StreamRendering(true)]
@inject ToursPageViewModel ToursVM
@inject NavigationManager NavManager
@using Client.Components

@using Client.Pages;

<PageTitle>Tours</PageTitle>

<div class="d-flex justify-content-between align-items-center">
    <h1>Tours</h1>

    <Button ButtonType="Primary" Label="Add Tour" Icon="map" OnClickCallback="AddTour"/>


</div>
@if (ToursVM.Tours == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Transport Type</th>
                    <th>From</th>
                    <th>To</th>
                    <th>Popularity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tour in ToursVM.Tours)
                {
                    <tr>
                        <td>
                            <a class="link" style="cursor:pointer" @onclick='() => TourDetails(tour.Id.ToString())'>@tour.Name</a>
                        </td>
                        <td>@tour.Description</td>
                        <td>@tour.TransportType</td>
                        <td>@tour.From</td>
                        <td>@tour.To</td>
                        <td>@tour.Popularity / 10</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ToursVM.GetToursAsync();
        StateHasChanged();
    }

    private void AddTour()
    {
        NavManager.NavigateTo("/new");
    }

    private void EditTour(int tourId)
    {
        NavManager.NavigateTo($"/tour/{tourId}");
    }

    private void TourDetails(string tourId)
    {
        Console.WriteLine($"TOUR ID: {tourId}");
        NavManager.NavigateTo($"/tours/{tourId}");
    }
}
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Client;
using Client.Dao;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
builder.Services.AddScoped<IHttpService, HttpService>();
builder.Services.AddTransient<ITourDao, TourDao>();
builder.Services.AddTransient<ITourLogDao, TourLogDao>();
builder.Services.AddScoped<ToursPageViewModel>();
builder.Services.AddScoped<TourDetailsPageViewModel>();
builder.Services.AddScoped<TourAddPageViewModel>();
builder.Services.AddScoped<TourEditPageViewModel>();
builder.Services.AddScoped<TourLogPageViewModel>();
builder.Services.AddScoped<TourLogAddPageViewModel>();

await builder.Build().RunAsync();﻿namespace Client.Services;

public class FuzzyMatcher
{
    private int stringLengthWeight;
    private int sensitivity;
    private int costInsertion { get; set; }
    private int costSubstitution { get; set; }
    private int costDeletion { get; set; }
    private int minStringLengthToApplyWeight { get; set; }

    public FuzzyMatcher()
    {
        this.costInsertion = 1;
        this.costSubstitution = 1;
        this.costDeletion = 1;
        this.stringLengthWeight = 1;
        this.minStringLengthToApplyWeight = 6;
        this.sensitivity = 1;
    }

    private int[,] InitMatrix(int lengthStr1, int lengthStr2)
    {
        int[,] arr = new int[lengthStr1 + 1, lengthStr2 + 1];

        for (int i = 0; i <= lengthStr1; i++)
        {
            arr[i, 0] = i;
        }

        for (int j = 0; j <= lengthStr2; j++)
        {
            arr[0, j] = j;
        }

        return arr;
    }

    public int GetEditDistance(string string1, string string2)
    {
        int lengthStr1 = string1.Length;
        int lengthStr2 = string2.Length;

        if (lengthStr1 == 0)
        {
            return lengthStr2;
        }
        if (lengthStr2 == 0)
        {
            return lengthStr1;
        }

        int[,] arr = InitMatrix(lengthStr1, lengthStr2);

        for (int i = 1; i <= lengthStr1; i++)
        {
            for (int j = 1; j <= lengthStr2; j++)
            {
                if (string1[i - 1] == string2[j - 1])
                {
                    arr[i, j] = arr[i - 1, j - 1];
                }
                else
                {
                    arr[i, j] = Math.Min(
                        arr[i - 1, j - 1],
                        Math.Min(arr[i, j - 1], arr[i - 1, j])
                    ) + 1;
                }
            }
        }

        int distance = arr[lengthStr1, lengthStr2];

        return distance;
    }
}using System.Net.Http;
using Client.Utils;
using System.Text.Json;
using System.Net.Http.Json;
using Client.Pages;

public interface IHttpService
{
    public Task<TDto> Get<TDto>(string url);
    public Task<HttpResponseMessage> Put<TDto>(TDto dto, string url);
    public Task<HttpResponseMessage> Delete(string url);
    public Task<HttpResponseMessage> Post<TDto>(TDto dto, string url);
}
public class HttpService : IHttpService
{
    private String baseUrl;
    private HttpClient client;
    public HttpService(HttpClient http)
    {
        baseUrl = StaticResService.GetApiBaseUrl;
        // client = new HttpClient();
        client = http;
        client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");

    }

    public async Task<TDto> Get<TDto>(string url)
    {
        var response = await client.GetAsync(baseUrl + url); // Properly awaited

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<TDto>(content, options: new JsonSerializerOptions(JsonSerializerDefaults.Web));
        }
        else
        {
            throw new Exception("Something went wrong");
        }
    }


    public async Task<HttpResponseMessage> Post<TDto>(TDto dto, string url)
    {
        return await client.PostAsJsonAsync(baseUrl + url, dto);
    }

    public async Task<HttpResponseMessage> Put<TDto>(TDto dto, string url)
    {
        return await client.PutAsJsonAsync(baseUrl + url, dto);
    }

    public async Task<HttpResponseMessage> Delete(string url)
    {
        return await client.DeleteAsync(baseUrl + url);
    }
}﻿namespace Client.Services.Search
{
    public interface ISearchService
    {
        public List<string> GetMatches(string provided, List<string> suggestions);
        public void SetSearchableWords(List<string> wordlist);
    }
}﻿namespace Client.Services.Search
{
    public class StringSearchService : ISearchService
    {
        private Trie prefixTree;
        private List<string> searchableWords;
        private bool completedSetup;
        private FuzzyMatcher fuzzyMatcher;

        public StringSearchService()
        {
            fuzzyMatcher = new FuzzyMatcher();
            prefixTree = new Trie(true);
            searchableWords = new List<string>();
            completedSetup = false;
        }

        public void SetSearchableWords(List<string> words)
        {
            searchableWords = words.Select(word => word.ToLower()).ToList();
            prefixTree.Init(words);
            completedSetup = true;
        }

        private int CbSortByDistanceAsc(WordDistanceMap currentWord, WordDistanceMap nextWord)
        {
            return currentWord.Distance <= nextWord.Distance ? -1 : 1;
        }

        private int CbSortByPrefixAsc(WordDistanceMap currentWord, WordDistanceMap nextWord)
        {
            if (currentWord.IsPrefix && !nextWord.IsPrefix)
                return -1;
            if (!currentWord.IsPrefix && nextWord.IsPrefix)
                return 1;
            if (!currentWord.IsPrefix && !nextWord.IsPrefix)
                return 0;
            if (currentWord.IsPrefix && currentWord.Distance <= nextWord.Distance)
                return -1;
            return 1;
        }

        private List<WordDistanceMap> SortSuggestions(List<WordDistanceMap> distanceMappings)
        {
            var sorted = distanceMappings.OrderBy(word => word.Distance).ToList();
            sorted.Sort(CbSortByPrefixAsc);
            return sorted;
        }

        public List<string> GetMatches(string userInput, List<string> wordList)
        {
            SetSearchableWords(wordList);
            wordList = wordList.Select(word => word.ToLower()).ToList();
            var stringDistanceMappings = CreateDistanceMappingsForWordList(wordList, userInput);
            stringDistanceMappings = SortSuggestions(stringDistanceMappings);
            var matches = stringDistanceMappings.Select(word => word.Content).ToList();
            
            Reset();

            return matches;
        }
        
        public List<string> GetMatches(string userInput)
        {
            if (!completedSetup)
                throw new Exception("Setup incomplete!");
            
            var matches = searchableWords.Select(word => word.ToLower()).ToList();
            var stringDistanceMappings = CreateDistanceMappingsForWordList(matches, userInput);
            stringDistanceMappings = SortSuggestions(stringDistanceMappings);

            return stringDistanceMappings.Select(word => word.Content).ToList();
        }

        private string LimitWordLength(string word, int length)
        {
            return word.Substring(0, Math.Min(length, word.Length));
        }

        private int GetShorterDistance(string userInput, string word)
        {
            int userInputLength = userInput.Length;
            string trimmedWord = word.Substring(0, Math.Min(userInputLength, word.Length));
            int trimmedWordDistance = fuzzyMatcher.GetEditDistance(userInput, trimmedWord);
            int untrimmedWordDistance = fuzzyMatcher.GetEditDistance(userInput, word);

            return Math.Min(trimmedWordDistance, untrimmedWordDistance);
        }

        private List<WordDistanceMap> CreateDistanceMappingsForWordList(List<string> wordList, string userInput)
        {
            bool existsAsPrefix = prefixTree.PrefixExists(userInput);

            return wordList.Select(word =>
            {
                bool isPrefix = existsAsPrefix && word.StartsWith(userInput);
                int distance = GetShorterDistance(userInput, word);
                return new WordDistanceMap(word, distance, isPrefix);
            }).ToList();
        }

        private void Reset()
        {
            completedSetup = false;
            searchableWords = new List<string>();
            prefixTree = new Trie(true);
        }
    }
}﻿namespace Client.Services.Search
{
    public class Trie
    {
        private TrieNode root;
        private bool ignoreCase;

        public Trie(bool caseInsensitive)
        {
            root = new TrieNode();
            ignoreCase = caseInsensitive;
        }

        public void Init(List<string> wordList)
        {
            foreach (var word in wordList)
            {
                Insert(word);
            }
        }

        private int CharToIndex(char character)
        {
            return ignoreCase
                ? char.ToLower(character) - 'a'
                : character - 'a';
        }

        public bool Insert(string word)
        {
            try
            {
                if (WordExists(word))
                    return true;

                TrieNode node = root;

                foreach (var character in word)
                {
                    int index = CharToIndex(character);

                    if (node.Children.ElementAtOrDefault(index) is null)
                    {
                        node.Children[index] = new TrieNode();
                    }

                    node = node.Children.ElementAt(index);
                }

                node.IsTerminal = true;
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                return false;
            }
        }

        public bool WordExists(string word)
        {
            TrieNode node = root;

            foreach (var character in word)
            {
                int index = CharToIndex(character);

                if (node.Children.ElementAtOrDefault(index) is null)
                {
                    return false;
                }

                node = node.Children.ElementAt(index);
            }

            return node.IsTerminal;
        }

        public bool PrefixExists(string prefix)
        {
            TrieNode node = root;

            foreach (var character in prefix)
            {
                int index = CharToIndex(character);

                if (node.Children.ElementAtOrDefault(index) is null)
                {
                    return false;
                }

                node = node.Children.ElementAt(index);
            }

            return true;
        }
    }
}﻿namespace Client.Services.Search
{
    public class TrieNode
    {
        public TrieNode[] Children { get; set; } = new TrieNode[130];
        public bool IsTerminal { get; set; }

        public TrieNode(bool isTerminal = false)
        {
            IsTerminal = isTerminal;
        }
    } 
}
﻿namespace Client.Services.Search
{
    public class WordDistanceMap
    {
        public string Content { get; set; }
        public int Distance { get; set; }
        public bool IsPrefix { get; set; }

        public WordDistanceMap(string content, int distance, bool isPrefix)
        {
            Content = Content;
            Distance = distance;
            IsPrefix = isPrefix;
        }
    };
}﻿namespace Client.Utils;

public static class StaticResService
{
    private static String IconBasePath = "Icons/";
    public static String GetIconPath(String IconName) => $"{IconBasePath}{Images.ResourceManager.GetString(IconName)}";
    public static String GetColor(String ColorKey) => Images.ResourceManager.GetString(ColorKey);
    public static String GetApiBaseUrl => Images.ResourceManager.GetString("api_base_url");
}using Microsoft.AspNetCore.Components;
using Client.Dao;
using Client.Models;

public class TourAddPageViewModel
{
    private readonly ITourDao _tourDao;
    private readonly NavigationManager _navigationManager;

    public TourAddPageViewModel(NavigationManager navigationManager, ITourDao tourDao)
    {
        _navigationManager = navigationManager;
        _tourDao = tourDao;
    }
    public Tour Tour { get; private set; } = new Tour();

    public async Task AddTour()
    {
        try
        {

            await _tourDao.Create(Tour);
            Tour = new Tour();
            _navigationManager.NavigateTo("/tours");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding tour: {ex.Message}");
        }
    }
}
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Client.Dao;
using Client.Models;
using Client.Dto;

public class TourDetailsPageViewModel
{
    private ITourDao _tourDao;
    private ITourLogDao _tourLogDao;

    public TourDetailsPageViewModel(ITourDao tourDao, ITourLogDao TourLogDao)
    {
        _tourDao = tourDao;
        _tourLogDao = TourLogDao;
    }

    public Tour Tour { get; set; } = new Tour();
    public List<TourLog> TourLogs { get; set; } = new List<TourLog>();

    public async Task InitializeAsync(int tourId)
    {
        TourLogs = (List<TourLog>) await _tourLogDao.ReadMultiple(tourId);
        Tour = new Tour();
        Tour.Id = tourId;
        Tour = await _tourDao.Read(Tour);
    }

    public async Task DeleteTour()
    {
        await _tourDao.Delete(Tour);

        foreach (var log in TourLogs)
        {
            await _tourLogDao.Delete(log);
        }
    }
}using Microsoft.AspNetCore.Components;
using Client.Dao;
using Client.Models;

public class TourEditPageViewModel
{
    private readonly ITourDao _tourDao;
    private readonly NavigationManager _navigationManager;

    public TourEditPageViewModel(NavigationManager navigationManager, ITourDao tourDao)
    {
        _navigationManager = navigationManager;
        _tourDao = tourDao;
    }

    public Tour Tour { get; set; } = new Tour();

    public async Task UpdateTour()
    {
        try
        {
            await _tourDao.Update(Tour);
            _navigationManager.NavigateTo($"/tours/{Tour.Id}");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Unexpected error: {e.Message}");
        }

    }

    public async Task InitializeAsync(int id)
    {
        try
        {
            Tour = new Tour { Id = id };
            Tour = await _tourDao.Read(Tour);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Unexpected error: {e.Message}");
        }
    }
}
using Microsoft.AspNetCore.Components;
using System;
using System.Threading.Tasks;
using Client.Dao;

public class TourLogAddPageViewModel
{
    public TourLog TourLog { get; set; } = new TourLog();
    private readonly NavigationManager _navigationManager;
    private ITourLogDao _tourLogDao;

    public TourLogAddPageViewModel(NavigationManager navigationManager, ITourLogDao tourLogDao)
    {
        _navigationManager = navigationManager;
        _tourLogDao = tourLogDao;
        TourLog = new TourLog();
        
    }

    public async Task InitializeAsync(int tourId)
    {
        TourLog.Tour.Id = tourId;
    }


    public async Task AddLog()
    {
        await _tourLogDao.Create(TourLog);
        _navigationManager.NavigateTo($"/tours/{TourLog.Tour.Id}");
        TourLog = new TourLog();
    }
};
using Microsoft.AspNetCore.Components;
using Client.Dao;
public class TourLogPageViewModel
{
    public TourLog TourLog { get; set; }
    private NavigationManager NavigationManager;
    private ITourLogDao _tourLogDao;

    public TourLogPageViewModel(NavigationManager navigationManager, ITourLogDao tourLogDao)
    {
        NavigationManager = navigationManager;
        this._tourLogDao = tourLogDao;
    }

    public async Task InitializeAsync(int tourId, int logId)
    {
        TourLog = new TourLog();
        TourLog.Id = logId;
        TourLog.Tour.Id = tourId;
        TourLog = await _tourLogDao.Read(TourLog);
    }

    public async Task DeleteLog()
    {
    try {
        
        await _tourLogDao.Delete(TourLog);
        NavigationManager.NavigateTo($"/tours/{TourLog.Tour.Id}");
        } catch (Exception e) {
            Console.WriteLine(e);
        }
    }

    public async Task UpdateLog()
    {
        await _tourLogDao.Update(TourLog);
        NavigationManager.NavigateTo($"/tours/{TourLog.Tour.Id}");
    }
}
using Client.Models;
using Client.Dao;

public class ToursPageViewModel
{
    private ITourDao _tourDao;
    public IEnumerable<Tour> Tours { get; private set; } = new List<Tour>();

    public ToursPageViewModel(ITourDao tourDao)
    {
        _tourDao = tourDao;
    }

    public async Task GetToursAsync()
    {
        try
        {
            Tours = await _tourDao.ReadMultiple();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching tours: {ex.Message}");
            throw;
        }
    }
}﻿@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.JSInterop
@using Client
@using Client.Layout// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("UnitTests")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+985fc77dc955550a4be9a5e209c1c0e4f733d156")]
[assembly: System.Reflection.AssemblyProductAttribute("UnitTests")]
[assembly: System.Reflection.AssemblyTitleAttribute("UnitTests")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::NUnit.Framework;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using Tourplanner.Services.Search;

namespace UnitTests.Services;

[TestFixture]
[TestOf(typeof(StringSearchService))]
public class StringSearchServiceTest
{
    private ISearchService SearchService;
    
    [SetUp]
    public void Setup()
    {
        SearchService = new StringSearchService();
    }

    [Test]
    public void Returns_Correct_Matches()
    {
        List<string> searchableWords = ["asmel", "esel", "bmsel"];
        
        var matches = SearchService.GetMatches("amsel", searchableWords);

        // Assert.That(matches.All(match => searchableWords.Contains(match)));
    }

    [Test]
    public void Returns_Empty_List_When_DistanceExceeds_Threshold()
    {
        List<string> searchableWords = ["asmel", "esel", "bmsel"];
        
        var matches = SearchService.SetThreshold(0).GetMatches("threshold too large", searchableWords);

        Assert.That(matches.Count is 0);
    }
}﻿// using System.Collections.Generic;
// using System.Linq;
// using Moq;
// using NUnit.Framework;
// using Tourplanner.Entities.TourLogs;
// using Tourplanner.Repositories;
// using Tourplanner.Services;
//
// namespace Tourplanner.Services.Tests
// {
//     [TestFixture]
//     public class RatingServiceTests
//     {
//         [Test]
//         public void Calculate_ReturnsAverageRating_WhenTourLogsExist()
//         {
//             // Arrange
//             var tourLogs = new List<TourLog>
//             {
//                 new TourLog { TourLogId = 1, TourId = 1, Rating = 4 },
//                 new TourLog { TourLogId = 2, TourId = 1, Rating = 5 },
//                 new TourLog { TourLogId = 3, TourId = 1, Rating = 3 }
//             };
//             
//             var moqTourLogRepository = new Mock<ITourLogRepository>();
//             moqTourLogRepository.Setup(repo => repo.GetTourLogsForTour(1)).Returns(tourLogs);
//
//             var ratingService = new RatingService();
//
//             // Act
//             var result = ratingService.Calculate(moqTourLogRepository.Object.GetTourLogsForTour(1));
//
//             // Assert
//             Assert.That(4.0f == result); // The expected average rating is 4.0 (average of 4, 5, and 3)
//         }
//
//         [Test]
//         public void Calculate_ReturnsZero_WhenNoTourLogsExist()
//         {
//             // Arrange
//             var moqTourLogRepository = new Mock<ITourLogRepository>();
//             moqTourLogRepository.Setup(repo => repo.GetTourLogsForTour(1)).Returns(new List<TourLog>());
//
//             var ratingService = new RatingService();
//
//             // Act
//             var result = ratingService.Calculate(moqTourLogRepository.Object.GetTourLogsForTour(1));
//
//             // Assert
//             Assert.That(0.0f == result); // The expected result is 0.0 since there are no tour logs
//         }
//     }
// }// using Moq;
// using Tourplanner.Entities.Tours;
// using Tourplanner.Entities.TourLogs;
// using Tourplanner.Exceptions;
// using Tourplanner.Repositories;
// using Tourplanner.Services;
//
// namespace UnitTests;
//
//
// [TestFixture]
// public class ChildFriendlinessServiceTests
// {
//     [Test]
//     public async Task Calculate_ReturnsNormalizedSum()
//     {
//         // Arrange
//         var tour = new Tour { TourId = 1, Distance = 50, EstimatedTime = 120 };
//         var tourLogs = new List<TourLog>
//         {
//             new TourLog { TourLogId = 1, TourId = 1, Difficulty = 3 },
//             new TourLog { TourLogId = 2, TourId = 1, Difficulty = 4 }
//         };
//             
//         var moqTourRepo = new Mock<ITourRepository>();
//         moqTourRepo.Setup(repo => repo.GetAll()).ReturnsAsync(new List<Tour> { tour });
//
//         var moqLogRepo = new Mock<ITourLogRepository>();
//         moqLogRepo.Setup(repo => repo.GetTourLogsForTour(1)).Returns(tourLogs);
//
//         var service = new ChildFriendlinessService(moqTourRepo.Object, moqLogRepo.Object);
//
//         // Act
//         var result = await service.Calculate(1);
//
//         // Assert
//         Console.WriteLine(result);
//         Assert.That(10.0f == result); // Adjust the expected result based on your calculations
//     }
//
//     [Test]
//     public void Calculate_ThrowsException_WhenTourNotFound()
//     {
//         // Arrange
//         var moqTourRepo = new Mock<ITourRepository>();
//         moqTourRepo.Setup(repo => repo.GetAll()).ReturnsAsync(new List<Tour>());
//
//         var moqLogRepo = new Mock<ITourLogRepository>();
//
//         var service = new ChildFriendlinessService(moqTourRepo.Object, moqLogRepo.Object);
//
//         // Act & Assert
//         Assert.ThrowsAsync<ResourceNotFoundException>(async () => await service.Calculate(1));
//     }
// }using Moq;
using Microsoft.AspNetCore.Components;
using Client.Models;
using Client.Dao;

namespace Client.Tests.ViewModels
{
    [TestFixture]
    public class TourAddPageViewModelTests
    {
        private Mock<ITourDao> _mockTourDao;
        private Mock<NavigationManager> _mockNavigationManager;
        private TourAddPageViewModel _viewModel;

        [SetUp]
        public void SetUp()
        {
            _mockTourDao = new Mock<ITourDao>();
            _mockNavigationManager = new Mock<NavigationManager>();
            _viewModel = new TourAddPageViewModel(_mockNavigationManager.Object, _mockTourDao.Object);
        }

        [Test]
        public async Task AddTour_CallsCreateOnTourDao()
        {
            // Arrange
            _mockTourDao.Setup(dao => dao.Create(It.IsAny<Tour>())).Returns(Task.CompletedTask);

            // Act
            await _viewModel.AddTour();

            // Assert
            _mockTourDao.Verify(dao => dao.Create(It.IsAny<Tour>()), Times.Once);
        }
        
    }
}using Moq;
using Client.Dao;
using Client.Models;

namespace Client.Tests.ViewModels
{
    [TestFixture]
    public class TourDetailsPageViewModelTests
    {
        private Mock<ITourDao> _mockTourDao;
        private Mock<ITourLogDao> _mockTourLogDao;
        private TourDetailsPageViewModel _viewModel;

        [SetUp]
        public void SetUp()
        {
            _mockTourDao = new Mock<ITourDao>();
            _mockTourLogDao = new Mock<ITourLogDao>();
            _viewModel = new TourDetailsPageViewModel(_mockTourDao.Object, _mockTourLogDao.Object);
        }

        [Test]
        public async Task DeleteTour_ShouldDeleteTourAndTourLogs()
        {
            // Arrange
            var tour = new Tour { Id = 1 };
            var tourLogs = new List<TourLog> { new TourLog(), new TourLog() };

            _viewModel.Tour = tour;
            _viewModel.TourLogs = tourLogs;

            _mockTourDao.Setup(dao => dao.Delete(tour)).Returns(Task.CompletedTask);
            _mockTourLogDao.Setup(dao => dao.Delete(It.IsAny<TourLog>())).Returns(Task.CompletedTask);

            // Act
            await _viewModel.DeleteTour();

            // Assert
            _mockTourDao.Verify(dao => dao.Delete(tour), Times.Once);
            foreach (var log in tourLogs)
            {
                _mockTourLogDao.Verify(dao => dao.Delete(log), Times.Once);
            }
        }
    }
}using Moq;
using Microsoft.AspNetCore.Components;
using Client.Models;
using Client.Dao;
using NUnit.Framework;
using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace Client.Tests.ViewModels
{
    [TestFixture]
    public class TourEditPageViewModelTests
    {
        private Mock<ITourDao> _mockTourDao;
        private Mock<NavigationManager> _mockNavigationManager;
        private TourEditPageViewModel _viewModel;

        [SetUp]
        public void SetUp()
        {
            _mockTourDao = new Mock<ITourDao>();
            _mockNavigationManager = new Mock<NavigationManager>();
            _viewModel = new TourEditPageViewModel(_mockNavigationManager.Object, _mockTourDao.Object);
        }

        [Test]
        public async Task UpdateTour_CallsUpdateOnTourDao()
        {
            // Arrange
            _mockTourDao.Setup(dao => dao.Update(It.IsAny<Tour>())).Returns(Task.CompletedTask);

            // Act
            await _viewModel.UpdateTour();

            // Assert
            _mockTourDao.Verify(dao => dao.Update(It.IsAny<Tour>()), Times.Once);
        }

    }
}using System.Collections.Generic;
using System.Threading.Tasks;
using Client.Models;
using Client.Dao;
using Moq;
using NUnit.Framework;

namespace Client.Tests.ViewModels
{
    [TestFixture]
    public class ToursPageViewModelTests
    {
        private Mock<ITourDao> _mockTourDao;
        private ToursPageViewModel _viewModel;

        [SetUp]
        public void SetUp()
        {
            _mockTourDao = new Mock<ITourDao>();
            _viewModel = new ToursPageViewModel(_mockTourDao.Object);
        }

        [Test]
        public async Task GetToursAsync_SuccessfullyFetchesTours()
        {
            // Arrange
            var tours = new List<Tour>
            {
                new Tour { Name = "Tour 1", Id = 1 },
                new Tour { Name = "Tour 2", Id = 2 }
            };
            _mockTourDao.Setup(dao => dao.ReadMultiple()).ReturnsAsync(tours);

            // Act
            await _viewModel.GetToursAsync();

            // Assert
            Assert.That(tours == _viewModel.Tours);
        }
    }
}
